!function(){$(function(){$.each($(".contact-us"),function(){new n($(this))}),$.each($(".site__header"),function(){new e($(this))}),$.each($(".mobile-menu"),function(){new i($(this))}),$.each($(".preloader"),function(){new t($(this))}),$.each($(".products"),function(){new o($(this))}),$.each($(".history"),function(){new a($(this))})});var n=function(n){var e=this,i=n,t=n.find("input[type=checkbox]"),o=n.find("input[type=radio]"),a=i.find(".ginput_container_fileupload"),s=a.parent().find(".gfield_description").text(),c=i.find("input[type=file]"),r=function(){c.on({change:function(n){this.files&&this.files[0]&&(s=this.files[0].name,a.addClass("changing"),a.attr("data-text",s))}})},f=function(){i[0].obj=e,r(),t.each(function(){$(this).parent().addClass("nice-checkbox")}),o.each(function(){$(this).parent().addClass("nice-radio")}),a.attr("data-text",s)};f()},e=function(n){var e,i=this,t=n,o=!0,a=$(".hero"),s=$(window),c=function(){s.on({DOMMouseScroll:function(n){var e=n.originalEvent.detail;if(e){var i=e>0?1:-1;r(i)}},mousewheel:function(n){var e=n.originalEvent.wheelDelta;if(e){var i=e>0?-1:1;r(i)}},touchmove:function(n){var i=n.originalEvent.touches[0].clientY;i>e?r(-1):i<e&&r(1),e=i},keydown:function(n){switch(n.which){case 32:r(1);break;case 33:r(-1);break;case 34:r(1);break;case 35:r(1);break;case 36:r(-1);break;case 38:r(-1);break;case 40:r(1);break;default:return}},scroll:function(){var n=340;a.length>0&&(n=a.outerHeight()),s.scrollTop()>n?t.addClass("fixed"):t.removeClass("fixed")}})},r=function(n){n>0&&!t.hasClass("hidden")&&s.scrollTop()>t.outerHeight()&&o?l():n<0&&t.hasClass("hidden")&&o&&f()},f=function(){t.removeClass("hidden")},l=function(){t.addClass("hidden")},d=function(){t[0].obj=i,c()};i.setCanUseScroll=function(n){o=n},d()},i=function(n){var e=n,i=$(".mobile-menu-btn"),t=$("html"),o=function(){a()},a=function(){i.on("click",function(){$(this).hasClass("close")?c():s()})},s=function(){i.addClass("close"),e.addClass("visible"),t.css("overflow-y","hidden"),$(".site__header")[0].obj.setCanUseScroll(!0)},c=function(){i.removeClass("close"),e.removeClass("visible"),t.removeAttr("style"),$(".site__header")[0].obj.setCanUseScroll(!1)};o()},t=function(n){var e=n,i=e.find(".preloader__bar"),t=!1,o=!1,a=(e.data("delay"),$(window)),s=function(){a.on({load:function(){o=!0}})},c=function(){s(),r()},r=function(){var n=Math.floor(10*Math.random())+1,a=n;i.animate({width:""+n+"%"},200),setTimeout(function(){setInterval(function(){var n=Math.floor(90*Math.random())+1;n<90&&n>a&&(a=n,i.animate({width:""+n+"%"},200))},500)},1e3),setInterval(function(){o&&(i.animate({width:"100%"},200),e.css({opacity:0,visibility:"hidden"}),setTimeout(function(){e.remove()},650),t=!0)},500)};c()},o=function(n){var e,i=n,t=i.find(".products__swiper"),o=i.find(".products__prev"),a=i.find(".products__next"),s=($(window),function(){e=new Swiper(t,{autoplay:!1,speed:500,effect:"slide",slidesPerView:4,loop:!0,nextButton:a,prevButton:o,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}})}),c=function(){},r=function(){c(),s()};r()},a=function(n){var e=n,i=e.find(".history__years"),t=i.find(".history__years-line"),o=t.find(".history__years-point"),a=i.find(".history__years-list"),s=e.find(".history__content"),c=s.find(".swiper-slide"),r=null,f=($(window),function(){r=new Swiper(s,{pagination:a,paginationClickable:!0,paginationBulletRender:function(n,e){return'<span class="history__years-item '+e+'">'+c.eq(n).data("year")+"</span>"},onSlideChangeStart:function(n){d($(n.bullets[n.activeIndex]))}})}),l=function(){e.on("click",".history__years-item",function(){var n=$(this);d(n)}),$(window).on({resize:function(){d(e.find(".swiper-pagination-bullet-active"))}})},d=function(n){o.css({left:n.offset().left-t.offset().left+"px"})},u=function(){l(),f()};u()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
