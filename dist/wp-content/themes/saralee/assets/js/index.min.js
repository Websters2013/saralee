!function(){$(function(){$.each($(".site__header"),function(){new e($(this))}),$.each($(".mobile-menu"),function(){new n($(this))}),$.each($(".preloader"),function(){new i($(this))}),$.each($(".products"),function(){new t($(this))})});var e=function(e){var n,i=this,t=e,o=!0,a=$(".hero"),s=$(window),c=function(){s.on({DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;r(i)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;r(i)}},touchmove:function(e){var i=e.originalEvent.touches[0].clientY;i>n?r(-1):i<n&&r(1),n=i},keydown:function(e){switch(e.which){case 32:r(1);break;case 33:r(-1);break;case 34:r(1);break;case 35:r(1);break;case 36:r(-1);break;case 38:r(-1);break;case 40:r(1);break;default:return}},scroll:function(){var e=340;a.length>0&&(e=a.outerHeight()),s.scrollTop()>e?t.addClass("fixed"):t.removeClass("fixed")}})},r=function(e){e>0&&!t.hasClass("hidden")&&s.scrollTop()>t.outerHeight()&&o?u():e<0&&t.hasClass("hidden")&&o&&l()},l=function(){t.removeClass("hidden")},u=function(){t.addClass("hidden")},d=function(){t[0].obj=i,c()};i.setCanUseScroll=function(e){o=e},d()},n=function(e){var n=e,i=$(".mobile-menu-btn"),t=$("html"),o=function(){a()},a=function(){i.on("click",function(){$(this).hasClass("close")?c():s()})},s=function(){i.addClass("close"),n.addClass("visible"),t.css("overflow-y","hidden"),$(".site__header")[0].obj.setCanUseScroll(!0)},c=function(){i.removeClass("close"),n.removeClass("visible"),t.removeAttr("style"),$(".site__header")[0].obj.setCanUseScroll(!1)};o()},i=function(e){var n=e,i=n.find(".preloader__bar"),t=!1,o=!1,a=(n.data("delay"),$(window)),s=function(){a.on({load:function(){o=!0}})},c=function(){s(),r()},r=function(){var e=Math.floor(10*Math.random())+1,a=e;i.animate({width:""+e+"%"},200),setTimeout(function(){setInterval(function(){var e=Math.floor(90*Math.random())+1;e<90&&e>a&&(a=e,i.animate({width:""+e+"%"},200))},500)},1e3),setInterval(function(){o&&(i.animate({width:"100%"},200),n.css({opacity:0,visibility:"hidden"}),setTimeout(function(){n.remove()},650),t=!0)},500)};c()},t=function(e){var n,i=e,t=i.find(".products__swiper"),o=i.find(".products__prev"),a=i.find(".products__next"),s=($(window),function(){n=new Swiper(t,{autoplay:!1,speed:500,effect:"slide",slidesPerView:4,loop:!0,nextButton:a,prevButton:o,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}})}),c=function(){},r=function(){c(),s()};r()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIkhlYWRlciIsInRoaXMiLCJNZW51IiwiUHJlbG9hZGVyIiwiU2xpZGVycyIsIm9iaiIsIl9sYXN0UG9zIiwiX3NlbGYiLCJfb2JqIiwiX2NhblVzZVNtb290aFNjcm9sbCIsIl9pbmRleEhlcm8iLCJfd2luZG93Iiwid2luZG93IiwiX29uRXZlbnRzIiwib24iLCJET01Nb3VzZVNjcm9sbCIsImUiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJkZXRhaWwiLCJkaXJlY3Rpb24iLCJfY2hlY2tTY3JvbGwiLCJtb3VzZXdoZWVsIiwid2hlZWxEZWx0YSIsInRvdWNobW92ZSIsImN1cnJlbnRQb3MiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImtleWRvd24iLCJ3aGljaCIsInNjcm9sbCIsInNwYWNlIiwibGVuZ3RoIiwib3V0ZXJIZWlnaHQiLCJzY3JvbGxUb3AiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJfaGlkZUhlYWRlciIsIl9zaG93SGVhZGVyIiwiX2NvbnN0cnVjdCIsInNldENhblVzZVNjcm9sbCIsInBhcmFtIiwiX2J0biIsIl9odG1sIiwiX2NvbnN0cnVjdG9yIiwiX2Nsb3NlTWVudSIsIl9vcGVuTWVudSIsImNzcyIsInJlbW92ZUF0dHIiLCJfbG9hZGVyIiwiZmluZCIsIl9mbGFnIiwiX2xvYWRGbGFnIiwiZGF0YSIsImxvYWQiLCJfaW5pdCIsIl9sb2FkQmFyIiwiZmlyc3RMb2FkVmFsIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY3VyVmFsdWUiLCJhbmltYXRlIiwid2lkdGgiLCJzZXRUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJsb2FkVmFsIiwib3BhY2l0eSIsInZpc2liaWxpdHkiLCJyZW1vdmUiLCJfcHJvZHVjdHMiLCJfcHJvZHVjdHNTd2lwZXIiLCJfcHJvZHVjdHNQcmV2IiwiX3Byb2R1Y3RzTmV4dCIsIl9pbml0U2xpZGVyIiwiU3dpcGVyIiwiYXV0b3BsYXkiLCJzcGVlZCIsImVmZmVjdCIsInNsaWRlc1BlclZpZXciLCJsb29wIiwibmV4dEJ1dHRvbiIsInByZXZCdXR0b24iLCJicmVha3BvaW50cyIsIjc2NyIsIjExOTkiLCJfb25FdmVudCJdLCJtYXBwaW5ncyI6IkNBQUEsV0FFSUEsRUFBRyxXQUVDQSxFQUFFQyxLQUFNRCxFQUFHLGlCQUFtQixXQUMxQixHQUFJRSxHQUFRRixFQUFFRyxTQUdsQkgsRUFBRUMsS0FBTUQsRUFBRyxnQkFBa0IsV0FDekIsR0FBSUksR0FBTUosRUFBR0csU0FHakJILEVBQUVDLEtBQU1ELEVBQUcsY0FBZ0IsV0FDdkIsR0FBSUssR0FBV0wsRUFBR0csU0FHdEJILEVBQUVDLEtBQU1ELEVBQUcsYUFBZSxXQUN0QixHQUFJTSxHQUFTTixFQUFHRyxVQUt4QixJQUFJRCxHQUFTLFNBQVdLLEdBQ3BCLEdBRUlDLEdBRkFDLEVBQVFOLEtBQ1JPLEVBQU9ILEVBRVBJLEdBQXNCLEVBQ3RCQyxFQUFhWixFQUFHLFNBQ2hCYSxFQUFVYixFQUFHYyxRQUViQyxFQUFZLFdBRVJGLEVBQVFHLElBQ0pDLGVBQWtCLFNBQVdDLEdBQ3pCLEdBQUlDLEdBQVFELEVBQUVFLGNBQWNDLE1BQzVCLElBQUtGLEVBQVEsQ0FDVCxHQUFJRyxHQUFjSCxFQUFRLEVBQU0sSUFDaENJLEdBQWNELEtBR3RCRSxXQUFjLFNBQVdOLEdBQ3JCLEdBQUlDLEdBQVFELEVBQUVFLGNBQWNLLFVBQzVCLElBQUtOLEVBQVEsQ0FDVCxHQUFJRyxHQUFjSCxFQUFRLEtBQVcsQ0FDckNJLEdBQWNELEtBR3RCSSxVQUFhLFNBQVdSLEdBQ3BCLEdBQUlTLEdBQWFULEVBQUVFLGNBQWNRLFFBQVEsR0FBR0MsT0FDdkNGLEdBQWFuQixFQUNkZSxNQUNRSSxFQUFhbkIsR0FDckJlLEVBQWMsR0FFbEJmLEVBQVdtQixHQUVmRyxRQUFXLFNBQVdaLEdBQ2xCLE9BQVFBLEVBQUVhLE9BRU4sSUFBSyxJQUNEUixFQUFjLEVBQ2QsTUFDSixLQUFLLElBQ0RBLEtBQ0EsTUFDSixLQUFLLElBQ0RBLEVBQWMsRUFDZCxNQUNKLEtBQUssSUFDREEsRUFBYyxFQUNkLE1BQ0osS0FBSyxJQUNEQSxLQUNBLE1BQ0osS0FBSyxJQUNEQSxLQUNBLE1BQ0osS0FBSyxJQUNEQSxFQUFjLEVBQ2QsTUFFSixTQUNJLFNBR1pTLE9BQVUsV0FFTixHQUFJQyxHQUFRLEdBRVByQixHQUFXc0IsT0FBUyxJQUNyQkQsRUFBUXJCLEVBQVd1QixlQUdsQnRCLEVBQVF1QixZQUFjSCxFQUN2QnZCLEVBQUsyQixTQUFVLFNBRWYzQixFQUFLNEIsWUFBYSxhQU9sQ2YsRUFBZSxTQUFVRCxHQUNqQkEsRUFBWSxJQUFNWixFQUFLNkIsU0FBVSxXQUFjMUIsRUFBUXVCLFlBQWMxQixFQUFLeUIsZUFBaUJ4QixFQUMzRjZCLElBQ09sQixFQUFZLEdBQUtaLEVBQUs2QixTQUFVLFdBQWM1QixHQUNyRDhCLEtBR1JBLEVBQWMsV0FDVi9CLEVBQUs0QixZQUFhLFdBRXRCRSxFQUFjLFdBQ1Y5QixFQUFLMkIsU0FBVSxXQUVuQkssRUFBYSxXQUNUaEMsRUFBTSxHQUFJSCxJQUFNRSxFQUNoQk0sSUFJUk4sR0FBTWtDLGdCQUFrQixTQUFXQyxHQUMvQmpDLEVBQXNCaUMsR0FHMUJGLEtBR0F0QyxFQUFPLFNBQVVHLEdBR2pCLEdBQUlHLEdBQU9ILEVBQ1BzQyxFQUFPN0MsRUFBRyxvQkFDVjhDLEVBQVE5QyxFQUFHLFFBR1grQyxFQUFlLFdBQ1hoQyxLQUVKQSxFQUFZLFdBRVI4QixFQUFLN0IsR0FBSSxRQUFTLFdBRVRoQixFQUFHRyxNQUFNb0MsU0FBVSxTQUNwQlMsSUFFQUMsT0FNWkEsRUFBWSxXQUNSSixFQUFLUixTQUFVLFNBQ2YzQixFQUFLMkIsU0FBVSxXQUNmUyxFQUFNSSxJQUFLLGFBQWMsVUFFekJsRCxFQUFHLGlCQUFrQixHQUFHTyxJQUFJb0MsaUJBQWlCLElBRWpESyxFQUFhLFdBQ1RILEVBQUtQLFlBQWEsU0FDbEI1QixFQUFLNEIsWUFBYSxXQUNsQlEsRUFBTUssV0FBWSxTQUVsQm5ELEVBQUcsaUJBQWtCLEdBQUdPLElBQUlvQyxpQkFBaUIsR0FPckRJLE1BSUExQyxFQUFZLFNBQVdFLEdBRXZCLEdBQUlHLEdBQU9ILEVBQ1A2QyxFQUFVMUMsRUFBSzJDLEtBQU0sbUJBQ3JCQyxHQUFRLEVBQ1JDLEdBQVksRUFFWjFDLEdBRFNILEVBQUs4QyxLQUFNLFNBQ1Z4RCxFQUFHYyxTQUViQyxFQUFZLFdBRVJGLEVBQVFHLElBQ0p5QyxLQUFNLFdBRUZGLEdBQVksTUFNeEJHLEVBQVEsV0FDSjNDLElBQ0E0QyxLQUVKQSxFQUFXLFdBRVAsR0FBSUMsR0FBZUMsS0FBS0MsTUFBc0IsR0FBaEJELEtBQUtFLFVBQWlCLEVBQ2hEQyxFQUFXSixDQUVmUixHQUFRYSxTQUFTQyxNQUFRLEdBQUdOLEVBQWEsS0FBTSxLQUUvQ08sV0FBVyxXQUVQQyxZQUFZLFdBRVIsR0FBSUMsR0FBVVIsS0FBS0MsTUFBc0IsR0FBaEJELEtBQUtFLFVBQWlCLENBRTVDTSxHQUFRLElBQU1BLEVBQVFMLElBRXJCQSxFQUFXSyxFQUVYakIsRUFBUWEsU0FBU0MsTUFBUSxHQUFHRyxFQUFRLEtBQU0sT0FJL0MsTUFFSixLQUVIRCxZQUFZLFdBQ0xiLElBRUNILEVBQVFhLFNBQVNDLE1BQVMsUUFBVSxLQUVwQ3hELEVBQUt3QyxLQUNEb0IsUUFBVyxFQUNYQyxXQUFjLFdBR2xCSixXQUFXLFdBQ1B6RCxFQUFLOEQsVUFDTixLQUVIbEIsR0FBUSxJQUdiLEtBS1hJLE1BR0FwRCxFQUFVLFNBQVVDLEdBR3BCLEdBSUlrRSxHQUpBL0QsRUFBT0gsRUFDUG1FLEVBQWtCaEUsRUFBSzJDLEtBQU0scUJBQzdCc0IsRUFBZ0JqRSxFQUFLMkMsS0FBTSxtQkFDM0J1QixFQUFnQmxFLEVBQUsyQyxLQUFNLG1CQUszQndCLEdBSFU3RSxFQUFHYyxRQUdDLFdBRVYyRCxFQUFZLEdBQUlLLFFBQVNKLEdBQ3JCSyxVQUFVLEVBQ1ZDLE1BQU8sSUFDUEMsT0FBUSxRQUNSQyxjQUFlLEVBQ2ZDLE1BQU0sRUFDTkMsV0FBWVIsRUFDWlMsV0FBWVYsRUFDWlcsYUFDSUMsS0FDSUwsY0FBZSxHQUVuQk0sTUFDSU4sY0FBZSxRQVEvQk8sRUFBVyxhQUdYL0IsRUFBUSxXQUNKK0IsSUFDQVosSUFPUm5CIiwiZmlsZSI6ImluZGV4Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiggZnVuY3Rpb24oKXtcblxuICAgICQoIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLnNpdGVfX2hlYWRlcicgKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3IEhlYWRlciggJCh0aGlzKSApO1xuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLm1vYmlsZS1tZW51JyApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgTWVudSggJCggdGhpcyApICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoICcucHJlbG9hZGVyJyApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgUHJlbG9hZGVyKCAkKCB0aGlzICkgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5wcm9kdWN0cycgKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3IFNsaWRlcnMoICQoIHRoaXMgKSApO1xuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgSGVhZGVyID0gZnVuY3Rpb24gKCBvYmogKSB7XG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2xhc3RQb3MsXG4gICAgICAgICAgICBfY2FuVXNlU21vb3RoU2Nyb2xsID0gdHJ1ZSxcbiAgICAgICAgICAgIF9pbmRleEhlcm8gPSAkKCAnLmhlcm8nICksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XG5cbiAgICAgICAgdmFyIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICAnRE9NTW91c2VTY3JvbGwnOiBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWx0YSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKCBkZWx0YSA+IDAgKSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIGRpcmVjdGlvbiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbW91c2V3aGVlbCc6IGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWx0YSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKCBkZWx0YSA+IDAgKSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIGRpcmVjdGlvbiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAndG91Y2htb3ZlJzogZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3MgPSBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50UG9zID4gX2xhc3RQb3MgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAtMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY3VycmVudFBvcyA8IF9sYXN0UG9zICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2xhc3RQb3MgPSBjdXJyZW50UG9zO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAna2V5ZG93bic6IGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCggZS53aGljaCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM2IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAtMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbCc6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BhY2UgPSAzNDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX2luZGV4SGVyby5sZW5ndGggPiAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlID0gX2luZGV4SGVyby5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIF93aW5kb3cuc2Nyb2xsVG9wKCkgPiBzcGFjZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnZml4ZWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdmaXhlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrU2Nyb2xsID0gZnVuY3Rpb24oIGRpcmVjdGlvbiApe1xuICAgICAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gPiAwICYmICFfb2JqLmhhc0NsYXNzKCAnaGlkZGVuJyApICYmIF93aW5kb3cuc2Nyb2xsVG9wKCkgPiBfb2JqLm91dGVySGVpZ2h0KCkgJiYgX2NhblVzZVNtb290aFNjcm9sbCApIHtcbiAgICAgICAgICAgICAgICAgICAgX2hpZGVIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIGRpcmVjdGlvbiA8IDAgJiYgX29iai5oYXNDbGFzcyggJ2hpZGRlbicgKSAmJiBfY2FuVXNlU21vb3RoU2Nyb2xsICkge1xuICAgICAgICAgICAgICAgICAgICBfc2hvd0hlYWRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2hvd0hlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAnaGlkZGVuJyApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9oaWRlSGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdoaWRkZW4nICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuICAgICAgICBfc2VsZi5zZXRDYW5Vc2VTY3JvbGwgPSBmdW5jdGlvbiAoIHBhcmFtICkge1xuICAgICAgICAgICAgX2NhblVzZVNtb290aFNjcm9sbCA9IHBhcmFtO1xuICAgICAgICB9O1xuXG4gICAgICAgIF9jb25zdHJ1Y3QoKVxuICAgIH07XG5cbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uKCBvYmogKXtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9idG4gPSAkKCAnLm1vYmlsZS1tZW51LWJ0bicgKSxcbiAgICAgICAgICAgIF9odG1sID0gJCggJ2h0bWwnICk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIF9idG4ub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggJCggdGhpcykuaGFzQ2xhc3MoICdjbG9zZScgKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5NZW51KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vcGVuTWVudSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX2J0bi5hZGRDbGFzcyggJ2Nsb3NlJyApO1xuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICd2aXNpYmxlJyApO1xuICAgICAgICAgICAgICAgIF9odG1sLmNzcyggJ292ZXJmbG93LXknLCAnaGlkZGVuJyApO1xuXG4gICAgICAgICAgICAgICAgJCggJy5zaXRlX19oZWFkZXInIClbMF0ub2JqLnNldENhblVzZVNjcm9sbCggdHJ1ZSApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jbG9zZU1lbnUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9idG4ucmVtb3ZlQ2xhc3MoICdjbG9zZScgKTtcbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAndmlzaWJsZScgKTtcbiAgICAgICAgICAgICAgICBfaHRtbC5yZW1vdmVBdHRyKCAnc3R5bGUnICk7XG5cbiAgICAgICAgICAgICAgICAkKCAnLnNpdGVfX2hlYWRlcicgKVswXS5vYmouc2V0Q2FuVXNlU2Nyb2xsKCBmYWxzZSApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xuXG4gICAgfTtcblxuICAgIHZhciBQcmVsb2FkZXIgPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9sb2FkZXIgPSBfb2JqLmZpbmQoICcucHJlbG9hZGVyX19iYXInICksXG4gICAgICAgICAgICBfZmxhZyA9IGZhbHNlLFxuICAgICAgICAgICAgX2xvYWRGbGFnID0gZmFsc2UsXG4gICAgICAgICAgICBfZGVsYXkgPSBfb2JqLmRhdGEoICdkZWxheScgKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcblxuICAgICAgICB2YXIgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRGbGFnID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfbG9hZEJhcigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9sb2FkQmFyID0gZnVuY3Rpb24gKCl7XG5cbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RMb2FkVmFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApICsgMSxcbiAgICAgICAgICAgICAgICAgICAgY3VyVmFsdWUgPSBmaXJzdExvYWRWYWw7XG5cbiAgICAgICAgICAgICAgICBfbG9hZGVyLmFuaW1hdGUoeyd3aWR0aCc6JycrZmlyc3RMb2FkVmFsKyclJ30sIDIwMCk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkVmFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTApICsgMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobG9hZFZhbDw5MCAmJiBsb2FkVmFsPmN1clZhbHVlKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clZhbHVlID0gbG9hZFZhbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkZXIuYW5pbWF0ZSh7J3dpZHRoJzonJytsb2FkVmFsKyclJ30sIDIwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuXG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XG5cbiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoX2xvYWRGbGFnKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRlci5hbmltYXRlKHsnd2lkdGgnOiAxMDArJyUnfSwgMjAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3BhY2l0eSc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNjUwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWcgPSB0cnVlXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG5cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgU2xpZGVycyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfcHJvZHVjdHNTd2lwZXIgPSBfb2JqLmZpbmQoICcucHJvZHVjdHNfX3N3aXBlcicgKSxcbiAgICAgICAgICAgIF9wcm9kdWN0c1ByZXYgPSBfb2JqLmZpbmQoICcucHJvZHVjdHNfX3ByZXYnICksXG4gICAgICAgICAgICBfcHJvZHVjdHNOZXh0ID0gX29iai5maW5kKCAnLnByb2R1Y3RzX19uZXh0JyApLFxuICAgICAgICAgICAgX3Byb2R1Y3RzLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfaW5pdFNsaWRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX3Byb2R1Y3RzID0gbmV3IFN3aXBlciAoIF9wcm9kdWN0c1N3aXBlciwge1xuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdDogJ3NsaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNCxcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogX3Byb2R1Y3RzTmV4dCxcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX3Byb2R1Y3RzUHJldixcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIDc2Nzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAxMTk5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgLy8gcGFnaW5hdGlvbjogX2Nhc2VNYWluU2xpZGVyUGFnaW5hdGlvblxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29uRXZlbnQoKTtcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWRlciAoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyJdfQ==
