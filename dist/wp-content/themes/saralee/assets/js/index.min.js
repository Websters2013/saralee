!function(){$(function(){$.each($(".site__header"),function(){new n($(this))}),$.each($(".mobile-menu"),function(){new e($(this))}),$.each($(".preloader"),function(){new i($(this))}),$.each($(".products"),function(){new t($(this))}),$.each($(".history"),function(){new o($(this))})});var n=function(n){var e,i=this,t=n,o=!0,a=$(".hero"),s=$(window),r=function(){s.on({DOMMouseScroll:function(n){var e=n.originalEvent.detail;if(e){var i=e>0?1:-1;c(i)}},mousewheel:function(n){var e=n.originalEvent.wheelDelta;if(e){var i=e>0?-1:1;c(i)}},touchmove:function(n){var i=n.originalEvent.touches[0].clientY;i>e?c(-1):i<e&&c(1),e=i},keydown:function(n){switch(n.which){case 32:c(1);break;case 33:c(-1);break;case 34:c(1);break;case 35:c(1);break;case 36:c(-1);break;case 38:c(-1);break;case 40:c(1);break;default:return}},scroll:function(){var n=340;a.length>0&&(n=a.outerHeight()),s.scrollTop()>n?t.addClass("fixed"):t.removeClass("fixed")}})},c=function(n){n>0&&!t.hasClass("hidden")&&s.scrollTop()>t.outerHeight()&&o?f():n<0&&t.hasClass("hidden")&&o&&l()},l=function(){t.removeClass("hidden")},f=function(){t.addClass("hidden")},u=function(){t[0].obj=i,r()};i.setCanUseScroll=function(n){o=n},u()},e=function(n){var e=n,i=$(".mobile-menu-btn"),t=$("html"),o=function(){a()},a=function(){i.on("click",function(){$(this).hasClass("close")?r():s()})},s=function(){i.addClass("close"),e.addClass("visible"),t.css("overflow-y","hidden"),$(".site__header")[0].obj.setCanUseScroll(!0)},r=function(){i.removeClass("close"),e.removeClass("visible"),t.removeAttr("style"),$(".site__header")[0].obj.setCanUseScroll(!1)};o()},i=function(n){var e=n,i=e.find(".preloader__bar"),t=!1,o=!1,a=(e.data("delay"),$(window)),s=function(){a.on({load:function(){o=!0}})},r=function(){s(),c()},c=function(){var n=Math.floor(10*Math.random())+1,a=n;i.animate({width:""+n+"%"},200),setTimeout(function(){setInterval(function(){var n=Math.floor(90*Math.random())+1;n<90&&n>a&&(a=n,i.animate({width:""+n+"%"},200))},500)},1e3),setInterval(function(){o&&(i.animate({width:"100%"},200),e.css({opacity:0,visibility:"hidden"}),setTimeout(function(){e.remove()},650),t=!0)},500)};r()},t=function(n){var e,i=n,t=i.find(".products__swiper"),o=i.find(".products__prev"),a=i.find(".products__next"),s=($(window),function(){e=new Swiper(t,{autoplay:!1,speed:500,effect:"slide",slidesPerView:4,loop:!0,nextButton:a,prevButton:o,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}})}),r=function(){},c=function(){r(),s()};c()},o=function(n){var e=n,i=e.find(".history__years"),t=i.find(".history__years-line"),o=t.offset().left,a=t.find(".history__years-point"),s=i.find(".history__years-list"),r=e.find(".history__content"),c=r.find(".swiper-slide"),l=null,f=($(window),function(){l=new Swiper(r,{pagination:s,paginationClickable:!0,paginationBulletRender:function(n,e){return'<span class="history__years-item '+e+'">'+c.eq(n).data("year")+"</span>"},onSlideChangeStart:function(n){d($(n.bullets[n.activeIndex]))}})}),u=function(){e.on("click",".history__years-item",function(){var n=$(this);d(n)})},d=function(n){a.css({left:n.offset().left-o+"px"})},h=function(){u(),f()};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIkhlYWRlciIsInRoaXMiLCJNZW51IiwiUHJlbG9hZGVyIiwiU2xpZGVycyIsIkhpc3RvcnkiLCJvYmoiLCJfbGFzdFBvcyIsIl9zZWxmIiwiX29iaiIsIl9jYW5Vc2VTbW9vdGhTY3JvbGwiLCJfaW5kZXhIZXJvIiwiX3dpbmRvdyIsIndpbmRvdyIsIl9vbkV2ZW50cyIsIm9uIiwiRE9NTW91c2VTY3JvbGwiLCJlIiwiZGVsdGEiLCJvcmlnaW5hbEV2ZW50IiwiZGV0YWlsIiwiZGlyZWN0aW9uIiwiX2NoZWNrU2Nyb2xsIiwibW91c2V3aGVlbCIsIndoZWVsRGVsdGEiLCJ0b3VjaG1vdmUiLCJjdXJyZW50UG9zIiwidG91Y2hlcyIsImNsaWVudFkiLCJrZXlkb3duIiwid2hpY2giLCJzY3JvbGwiLCJzcGFjZSIsImxlbmd0aCIsIm91dGVySGVpZ2h0Iiwic2Nyb2xsVG9wIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiX2hpZGVIZWFkZXIiLCJfc2hvd0hlYWRlciIsIl9jb25zdHJ1Y3QiLCJzZXRDYW5Vc2VTY3JvbGwiLCJwYXJhbSIsIl9idG4iLCJfaHRtbCIsIl9jb25zdHJ1Y3RvciIsIl9jbG9zZU1lbnUiLCJfb3Blbk1lbnUiLCJjc3MiLCJyZW1vdmVBdHRyIiwiX2xvYWRlciIsImZpbmQiLCJfZmxhZyIsIl9sb2FkRmxhZyIsImRhdGEiLCJsb2FkIiwiX2luaXQiLCJfbG9hZEJhciIsImZpcnN0TG9hZFZhbCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImN1clZhbHVlIiwiYW5pbWF0ZSIsIndpZHRoIiwic2V0VGltZW91dCIsInNldEludGVydmFsIiwibG9hZFZhbCIsIm9wYWNpdHkiLCJ2aXNpYmlsaXR5IiwicmVtb3ZlIiwiX3Byb2R1Y3RzIiwiX3Byb2R1Y3RzU3dpcGVyIiwiX3Byb2R1Y3RzUHJldiIsIl9wcm9kdWN0c05leHQiLCJfaW5pdFNsaWRlciIsIlN3aXBlciIsImF1dG9wbGF5Iiwic3BlZWQiLCJlZmZlY3QiLCJzbGlkZXNQZXJWaWV3IiwibG9vcCIsIm5leHRCdXR0b24iLCJwcmV2QnV0dG9uIiwiYnJlYWtwb2ludHMiLCI3NjciLCIxMTk5IiwiX29uRXZlbnQiLCJfeWVhcnMiLCJfeWVhcnNMaW5lIiwiX3llYXJzTGluZUxlZnQiLCJvZmZzZXQiLCJsZWZ0IiwiX3llYXJzUG9pbnQiLCJfeWVhcnNMaXN0IiwiX2NvbnRlbnRTbGlkZXIiLCJfc2xpZGVySXRlbXMiLCJfc3dpcGVyIiwicGFnaW5hdGlvbiIsInBhZ2luYXRpb25DbGlja2FibGUiLCJwYWdpbmF0aW9uQnVsbGV0UmVuZGVyIiwiaW5kZXgiLCJjbGFzc05hbWUiLCJlcSIsIm9uU2xpZGVDaGFuZ2VTdGFydCIsIl9zbGlkaW5nIiwiYnVsbGV0cyIsImFjdGl2ZUluZGV4IiwiYWN0aXZlRWxlbSIsImVsZW0iXSwibWFwcGluZ3MiOiJDQUFBLFdBRUlBLEVBQUcsV0FFQ0EsRUFBRUMsS0FBTUQsRUFBRyxpQkFBbUIsV0FDMUIsR0FBSUUsR0FBUUYsRUFBRUcsU0FHbEJILEVBQUVDLEtBQU1ELEVBQUcsZ0JBQWtCLFdBQ3pCLEdBQUlJLEdBQU1KLEVBQUdHLFNBR2pCSCxFQUFFQyxLQUFNRCxFQUFHLGNBQWdCLFdBQ3ZCLEdBQUlLLEdBQVdMLEVBQUdHLFNBR3RCSCxFQUFFQyxLQUFNRCxFQUFHLGFBQWUsV0FDdEIsR0FBSU0sR0FBU04sRUFBR0csU0FHcEJILEVBQUVDLEtBQU1ELEVBQUcsWUFBYyxXQUNyQixHQUFJTyxHQUFTUCxFQUFHRyxVQUt4QixJQUFJRCxHQUFTLFNBQVdNLEdBQ3BCLEdBRUlDLEdBRkFDLEVBQVFQLEtBQ1JRLEVBQU9ILEVBRVBJLEdBQXNCLEVBQ3RCQyxFQUFhYixFQUFHLFNBQ2hCYyxFQUFVZCxFQUFHZSxRQUViQyxFQUFZLFdBRVJGLEVBQVFHLElBQ0pDLGVBQWtCLFNBQVdDLEdBQ3pCLEdBQUlDLEdBQVFELEVBQUVFLGNBQWNDLE1BQzVCLElBQUtG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RixvQkFPbkNwQixFQUFXLFdBRVAvRSxFQUFLTSxHQUFHLFFBQVMsdUJBQXdCLFdBQ3JDLEdBQUk4RixHQUFhL0csRUFBRUcsS0FFbkJ5RyxHQUFTRyxNQUlqQkgsRUFBVyxTQUFTSSxHQUNoQmhCLEVBQVk3QyxLQUNSNEMsS0FBU2lCLEVBQUtsQixTQUFTQyxLQUFPRixFQUFrQixRQUd4RGxDLEVBQVEsV0FDSitCLElBQ0FaLElBT1JuQiIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoIGZ1bmN0aW9uKCl7XG5cbiAgICAkKCBmdW5jdGlvbigpe1xuXG4gICAgICAgICQuZWFjaCggJCggJy5zaXRlX19oZWFkZXInICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBIZWFkZXIoICQodGhpcykgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5tb2JpbGUtbWVudScgKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3IE1lbnUoICQoIHRoaXMgKSApO1xuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLnByZWxvYWRlcicgKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3IFByZWxvYWRlciggJCggdGhpcyApICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoICcucHJvZHVjdHMnICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBTbGlkZXJzKCAkKCB0aGlzICkgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5oaXN0b3J5JyApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgSGlzdG9yeSggJCggdGhpcyApICk7XG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBIZWFkZXIgPSBmdW5jdGlvbiAoIG9iaiApIHtcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfbGFzdFBvcyxcbiAgICAgICAgICAgIF9jYW5Vc2VTbW9vdGhTY3JvbGwgPSB0cnVlLFxuICAgICAgICAgICAgX2luZGV4SGVybyA9ICQoICcuaGVybycgKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcblxuICAgICAgICB2YXIgX29uRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICdET01Nb3VzZVNjcm9sbCc6IGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggZGlyZWN0aW9uICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZXdoZWVsJzogZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggZGlyZWN0aW9uICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICd0b3VjaG1vdmUnOiBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvcyA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnRQb3MgPiBfbGFzdFBvcyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBjdXJyZW50UG9zIDwgX2xhc3RQb3MgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFzdFBvcyA9IGN1cnJlbnRQb3M7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdrZXlkb3duJzogZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKCBlLndoaWNoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggLTEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM1IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzYgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggLTEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsJzogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFjZSA9IDM0MDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfaW5kZXhIZXJvLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2UgPSBfaW5kZXhIZXJvLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy5zY3JvbGxUb3AoKSA+IHNwYWNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdmaXhlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ2ZpeGVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbiggZGlyZWN0aW9uICl7XG4gICAgICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiA+IDAgJiYgIV9vYmouaGFzQ2xhc3MoICdoaWRkZW4nICkgJiYgX3dpbmRvdy5zY3JvbGxUb3AoKSA+IF9vYmoub3V0ZXJIZWlnaHQoKSAmJiBfY2FuVXNlU21vb3RoU2Nyb2xsICkge1xuICAgICAgICAgICAgICAgICAgICBfaGlkZUhlYWRlcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggZGlyZWN0aW9uIDwgMCAmJiBfb2JqLmhhc0NsYXNzKCAnaGlkZGVuJyApICYmIF9jYW5Vc2VTbW9vdGhTY3JvbGwgKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zaG93SGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zaG93SGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdoaWRkZW4nICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2hpZGVIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ2hpZGRlbicgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG4gICAgICAgIF9zZWxmLnNldENhblVzZVNjcm9sbCA9IGZ1bmN0aW9uICggcGFyYW0gKSB7XG4gICAgICAgICAgICBfY2FuVXNlU21vb3RoU2Nyb2xsID0gcGFyYW07XG4gICAgICAgIH07XG5cbiAgICAgICAgX2NvbnN0cnVjdCgpXG4gICAgfTtcblxuICAgIHZhciBNZW51ID0gZnVuY3Rpb24oIG9iaiApe1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2J0biA9ICQoICcubW9iaWxlLW1lbnUtYnRuJyApLFxuICAgICAgICAgICAgX2h0bWwgPSAkKCAnaHRtbCcgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgX2J0bi5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkKCB0aGlzKS5oYXNDbGFzcyggJ2Nsb3NlJyApICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfb3Blbk1lbnUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29wZW5NZW51ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfYnRuLmFkZENsYXNzKCAnY2xvc2UnICk7XG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3Zpc2libGUnICk7XG4gICAgICAgICAgICAgICAgX2h0bWwuY3NzKCAnb3ZlcmZsb3cteScsICdoaWRkZW4nICk7XG5cbiAgICAgICAgICAgICAgICAkKCAnLnNpdGVfX2hlYWRlcicgKVswXS5vYmouc2V0Q2FuVXNlU2Nyb2xsKCB0cnVlICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Nsb3NlTWVudSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX2J0bi5yZW1vdmVDbGFzcyggJ2Nsb3NlJyApO1xuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICd2aXNpYmxlJyApO1xuICAgICAgICAgICAgICAgIF9odG1sLnJlbW92ZUF0dHIoICdzdHlsZScgKTtcblxuICAgICAgICAgICAgICAgICQoICcuc2l0ZV9faGVhZGVyJyApWzBdLm9iai5zZXRDYW5Vc2VTY3JvbGwoIGZhbHNlICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XG5cbiAgICB9O1xuXG4gICAgdmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uICggb2JqICkge1xuXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2xvYWRlciA9IF9vYmouZmluZCggJy5wcmVsb2FkZXJfX2JhcicgKSxcbiAgICAgICAgICAgIF9mbGFnID0gZmFsc2UsXG4gICAgICAgICAgICBfbG9hZEZsYWcgPSBmYWxzZSxcbiAgICAgICAgICAgIF9kZWxheSA9IF9vYmouZGF0YSggJ2RlbGF5JyApLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApO1xuXG4gICAgICAgIHZhciBfb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9hZEZsYWcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9sb2FkQmFyKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2xvYWRCYXIgPSBmdW5jdGlvbiAoKXtcblxuICAgICAgICAgICAgICAgIHZhciBmaXJzdExvYWRWYWwgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkgKyAxLFxuICAgICAgICAgICAgICAgICAgICBjdXJWYWx1ZSA9IGZpcnN0TG9hZFZhbDtcblxuICAgICAgICAgICAgICAgIF9sb2FkZXIuYW5pbWF0ZSh7J3dpZHRoJzonJytmaXJzdExvYWRWYWwrJyUnfSwgMjAwKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvYWRWYWwgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5MCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihsb2FkVmFsPDkwICYmIGxvYWRWYWw+Y3VyVmFsdWUpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVmFsdWUgPSBsb2FkVmFsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRlci5hbmltYXRlKHsnd2lkdGgnOicnK2xvYWRWYWwrJyUnfSwgMjAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG5cbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgICAgICAgICBpZihfbG9hZEZsYWcpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9hZGVyLmFuaW1hdGUoeyd3aWR0aCc6IDEwMCsnJSd9LCAyMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcGFjaXR5JzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmlzaWJpbGl0eSc6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA2NTApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWVcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcblxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBTbGlkZXJzID0gZnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9wcm9kdWN0c1N3aXBlciA9IF9vYmouZmluZCggJy5wcm9kdWN0c19fc3dpcGVyJyApLFxuICAgICAgICAgICAgX3Byb2R1Y3RzUHJldiA9IF9vYmouZmluZCggJy5wcm9kdWN0c19fcHJldicgKSxcbiAgICAgICAgICAgIF9wcm9kdWN0c05leHQgPSBfb2JqLmZpbmQoICcucHJvZHVjdHNfX25leHQnICksXG4gICAgICAgICAgICBfcHJvZHVjdHMsXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9pbml0U2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfcHJvZHVjdHMgPSBuZXcgU3dpcGVyICggX3Byb2R1Y3RzU3dpcGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnc2xpZGUnLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiA0LFxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfcHJvZHVjdHNOZXh0LFxuICAgICAgICAgICAgICAgICAgICBwcmV2QnV0dG9uOiBfcHJvZHVjdHNQcmV2LFxuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgNzY3OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDExOTk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAvLyBwYWdpbmF0aW9uOiBfY2FzZU1haW5TbGlkZXJQYWdpbmF0aW9uXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb25FdmVudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xuICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyICgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBIaXN0b3J5ID0gZnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF95ZWFycyA9IF9vYmouZmluZCggJy5oaXN0b3J5X195ZWFycycgKSxcbiAgICAgICAgICAgIF95ZWFyc0xpbmUgPSBfeWVhcnMuZmluZCggJy5oaXN0b3J5X195ZWFycy1saW5lJyApLFxuICAgICAgICAgICAgX3llYXJzTGluZUxlZnQgPSBfeWVhcnNMaW5lLm9mZnNldCgpLmxlZnQsXG4gICAgICAgICAgICBfeWVhcnNQb2ludCA9IF95ZWFyc0xpbmUuZmluZCgnLmhpc3RvcnlfX3llYXJzLXBvaW50JyksXG4gICAgICAgICAgICBfeWVhcnNMaXN0ID0gX3llYXJzLmZpbmQoICcuaGlzdG9yeV9feWVhcnMtbGlzdCcgKSxcbiAgICAgICAgICAgIF9jb250ZW50U2xpZGVyID0gX29iai5maW5kKCAnLmhpc3RvcnlfX2NvbnRlbnQnICksXG4gICAgICAgICAgICBfc2xpZGVySXRlbXMgPSBfY29udGVudFNsaWRlci5maW5kKCcuc3dpcGVyLXNsaWRlJyksXG4gICAgICAgICAgICBfc3dpcGVyID0gbnVsbCxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2luaXRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIC8vIF9nYWxsZXJ5VG9wID0gbmV3IFN3aXBlcihfdG9wU3dpcGVyLCB7XG4gICAgICAgICAgICAgICAgLy8gICAgIG5leHRCdXR0b246ICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgICAgICAgICAgICAvLyAgICAgcHJldkJ1dHRvbjogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxuICAgICAgICAgICAgICAgIC8vICAgICBzcGFjZUJldHdlZW46IDEwLFxuICAgICAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgICAgIF9zd2lwZXIgPSBuZXcgU3dpcGVyKF9jb250ZW50U2xpZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF95ZWFyc0xpc3QsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25DbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25CdWxsZXRSZW5kZXI6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiaGlzdG9yeV9feWVhcnMtaXRlbSAnICsgY2xhc3NOYW1lICsgJ1wiPicgKyBfc2xpZGVySXRlbXMuZXEoaW5kZXgpLmRhdGEoJ3llYXInKSArICc8L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZUNoYW5nZVN0YXJ0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWRpbmcoJChlLmJ1bGxldHNbZS5hY3RpdmVJbmRleF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIF9nYWxsZXJ5VG9wLnBhcmFtcy5jb250cm9sID0gX2dhbGxlcnlUaHVtYnM7XG4gICAgICAgICAgICAgICAgLy8gX2dhbGxlcnlUaHVtYnMucGFyYW1zLmNvbnRyb2wgPSBfZ2FsbGVyeVRvcDtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqLm9uKCdjbGljaycsICcuaGlzdG9yeV9feWVhcnMtaXRlbScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbSA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgX3NsaWRpbmcoYWN0aXZlRWxlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2xpZGluZyA9IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgICAgICBfeWVhcnNQb2ludC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IChlbGVtLm9mZnNldCgpLmxlZnQgLSBfeWVhcnNMaW5lTGVmdCkgKyAncHgnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xuICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyICgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7Il19
