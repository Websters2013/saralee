!function(){$(function(){$.each($(".contact-us"),function(){new n($(this))}),$.each($(".site__header"),function(){new t($(this))}),$.each($(".list-info"),function(){new e($(this))}),$.each($(".mobile-menu"),function(){new i($(this))}),$.each($(".preloader"),function(){new o($(this))}),$.each($(".products"),function(){new a($(this))}),$.each($(".history"),function(){new s($(this))}),$.each($(".hero-slider"),function(){new c($(this))})});var n=function(n){var t=this,e=n,i=n.find("input[type=checkbox]"),o=n.find("input[type=radio]"),a=e.find(".ginput_container_fileupload"),s=a.parent().find(".gfield_description").text(),c=e.find("input[type=file]"),r=function(){c.on({change:function(n){this.files&&this.files[0]&&(s=this.files[0].name,a.addClass("changing"),a.attr("data-text",s))}})},l=function(){e[0].obj=t,r(),i.each(function(){$(this).parent().addClass("nice-checkbox")}),o.each(function(){$(this).parent().addClass("nice-radio")}),a.attr("data-text",s)};l()},t=function(n){var t,e=this,i=n,o=!0,a=$(".hero"),s=$(window),c=function(){s.on({DOMMouseScroll:function(n){var t=n.originalEvent.detail;if(t){var e=t>0?1:-1;r(e)}},mousewheel:function(n){var t=n.originalEvent.wheelDelta;if(t){var e=t>0?-1:1;r(e)}},touchmove:function(n){var e=n.originalEvent.touches[0].clientY;e>t?r(-1):e<t&&r(1),t=e},keydown:function(n){switch(n.which){case 32:r(1);break;case 33:r(-1);break;case 34:r(1);break;case 35:r(1);break;case 36:r(-1);break;case 38:r(-1);break;case 40:r(1);break;default:return}},scroll:function(){var n=340;a.length>0&&(n=a.outerHeight()),s.scrollTop()>n?i.addClass("fixed"):i.removeClass("fixed")}})},r=function(n){n>0&&!i.hasClass("hidden")&&s.scrollTop()>i.outerHeight()&&o?f():n<0&&i.hasClass("hidden")&&o&&l()},l=function(){i.removeClass("hidden")},f=function(){i.addClass("hidden")},u=function(){i[0].obj=e,c()};e.setCanUseScroll=function(n){o=n},u()},e=function(n){var t=n,e=t.find(".list-info__menu-title"),i=t.find("nav"),o=i.find("a"),a=t.find(".list-info__content"),s=t.data("path"),c=new XMLHttpRequest,r=function(){l()},l=function(){window.addEventListener("popstate",function(n){}),e.on("click",function(){i.hasClass("open")?d():u()}),o.on("click",function(n){n.preventDefault();var t=$(this),e=t.data("post");t.hasClass("active")||(o.attr("class",""),t.addClass("active"),f(e),d())})},f=function(n){c.abort(),c=$.ajax({url:s,data:{action:"post",data:n},dataType:"html",timeout:2e4,type:"get",success:function(n){h(n),history.pushState({html:n},null,null)},error:function(n){"abort"!=n.statusText&&alert("Error!")}})},u=function(){var n=$(window).scrollTop(),t=e.outerHeight(),o=$(window).height()-e.offset().top-t+n;i.addClass("open"),i.css({height:o+"px",top:t+"px"}),$("html").css({overflow:"hidden"}),$(".site__header")[0].obj.setCanUseScroll(!0)},d=function(){i.removeClass("open"),i.attr("style",""),$("html").attr("style",""),$(".site__header")[0].obj.setCanUseScroll(!1)},h=function(n){a.html(""),a.html(n)};r()},i=function(n){var t=n,e=$(".mobile-menu-btn"),i=$("html"),o=function(){a()},a=function(){e.on("click",function(){$(this).hasClass("close")?c():s()})},s=function(){e.addClass("close"),t.addClass("visible"),i.css("overflow-y","hidden"),$(".site__header")[0].obj.setCanUseScroll(!0)},c=function(){e.removeClass("close"),t.removeClass("visible"),i.removeAttr("style"),$(".site__header")[0].obj.setCanUseScroll(!1)};o()},o=function(n){var t=n,e=t.find(".preloader__bar"),i=!1,o=!1,a=(t.data("delay"),$(window)),s=function(){a.on({load:function(){o=!0}})},c=function(){s(),r()},r=function(){var n=Math.floor(10*Math.random())+1,a=n;e.animate({width:""+n+"%"},200),setTimeout(function(){setInterval(function(){var n=Math.floor(90*Math.random())+1;n<90&&n>a&&(a=n,e.animate({width:""+n+"%"},200))},500)},1e3),setInterval(function(){o&&(e.animate({width:"100%"},200),t.css({opacity:0,visibility:"hidden"}),setTimeout(function(){t.remove()},650),i=!0)},500)};c()},a=function(n){var t,e=n,i=e.find(".products__swiper"),o=e.find(".products__prev"),a=e.find(".products__next"),s=($(window),function(){t=new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:4,loop:!0,nextButton:a,prevButton:o,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}})}),c=function(){},r=function(){c(),s()};r()},s=function(n){var t=n,e=t.find(".history__years"),i=e.find(".history__years-line"),o=i.find(".history__years-point"),a=e.find(".history__years-list"),s=t.find(".history__content"),c=s.find(".swiper-slide"),r=null,l=($(window),function(){r=new Swiper(s,{pagination:a,paginationClickable:!0,paginationBulletRender:function(n,t){return'<span class="history__years-item '+t+'">'+c.eq(n).data("year")+"</span>"},onSlideChangeStart:function(n){u($(n.bullets[n.activeIndex]))}})}),f=function(){t.on("click",".history__years-item",function(){var n=$(this);u(n)}),$(window).on({resize:function(){u(t.find(".swiper-pagination-bullet-active"))}})},u=function(n){o.css({left:n.offset().left-i.offset().left+"px"})},d=function(){f(),l()};d()},c=function(n){var t=n,e=t.find(".swiper-container"),i=t.find(".swiper-pagination"),o=null,a=function(){console.log(111),o=new Swiper(e,{autoplay:3e3,speed:500,effect:"fade",loop:!0,pagination:i,paginationClickable:!0})},s=function(){},c=function(){s(),a()};c()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIkNvbnRhY3RVcyIsInRoaXMiLCJIZWFkZXIiLCJMaXN0SW5mbyIsIk1lbnUiLCJQcmVsb2FkZXIiLCJTbGlkZXJzIiwiSGlzdG9yeSIsIkhlcm9TbGlkZXIiLCJvYmoiLCJfc2VsZiIsIl9vYmoiLCJfY2hlY2tib3hlcyIsImZpbmQiLCJfcmFkaW8iLCJfd3JhcCIsIl9kYXRhVGV4dCIsInBhcmVudCIsInRleHQiLCJfaW5wdXRGaWxlIiwiX29uRXZlbnRzIiwib24iLCJjaGFuZ2UiLCJlIiwiZmlsZXMiLCJuYW1lIiwiYWRkQ2xhc3MiLCJhdHRyIiwiX2NvbnN0cnVjdCIsIl9sYXN0UG9zIiwiX2NhblVzZVNtb290aFNjcm9sbCIsIl9pbmRleEhlcm8iLCJfd2luZG93Iiwid2luZG93IiwiRE9NTW91c2VTY3JvbGwiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJkZXRhaWwiLCJkaXJlY3Rpb24iLCJfY2hlY2tTY3JvbGwiLCJtb3VzZXdoZWVsIiwid2hlZWxEZWx0YSIsInRvdWNobW92ZSIsImN1cnJlbnRQb3MiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImtleWRvd24iLCJ3aGljaCIsInNjcm9sbCIsInNwYWNlIiwibGVuZ3RoIiwib3V0ZXJIZWlnaHQiLCJzY3JvbGxUb3AiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiX2hpZGVIZWFkZXIiLCJfc2hvd0hlYWRlciIsInNldENhblVzZVNjcm9sbCIsInBhcmFtIiwiX2J0biIsIl9uYXZJdGVtcyIsIl9jb250ZW50IiwiX3BhdGgiLCJkYXRhIiwiX3JlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIl9jb25zdHJ1Y3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJfY2xvc2VNZW51IiwiX29wZW5NZW51IiwicHJldmVudERlZmF1bHQiLCJjdXJFbGVtIiwiY3VyUG9zdERhdGEiLCJfYWpheFJlcXVlc3QiLCJwb3N0RGF0YSIsImFib3J0IiwiYWpheCIsInVybCIsImFjdGlvbiIsImRhdGFUeXBlIiwidGltZW91dCIsInR5cGUiLCJzdWNjZXNzIiwibXNnIiwiX3dyaXRlTmV3Q29udGVudCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJodG1sIiwiZXJyb3IiLCJzdGF0dXNUZXh0IiwiYWxlcnQiLCJ3aW5TY3JvbGxUb3AiLCJwb3NpdGlvblRvcCIsImhlaWdodEVsZW0iLCJoZWlnaHQiLCJvZmZzZXQiLCJ0b3AiLCJjc3MiLCJvdmVyZmxvdyIsIl9odG1sIiwicmVtb3ZlQXR0ciIsIl9sb2FkZXIiLCJfZmxhZyIsIl9sb2FkRmxhZyIsImxvYWQiLCJfaW5pdCIsIl9sb2FkQmFyIiwiZmlyc3RMb2FkVmFsIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY3VyVmFsdWUiLCJhbmltYXRlIiwid2lkdGgiLCJzZXRUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJsb2FkVmFsIiwib3BhY2l0eSIsInZpc2liaWxpdHkiLCJyZW1vdmUiLCJfcHJvZHVjdHMiLCJfcHJvZHVjdHNTd2lwZXIiLCJfcHJvZHVjdHNQcmV2IiwiX3Byb2R1Y3RzTmV4dCIsIl9pbml0U2xpZGVyIiwiU3dpcGVyIiwiYXV0b3BsYXkiLCJzcGVlZCIsImVmZmVjdCIsInNsaWRlc1BlclZpZXciLCJsb29wIiwibmV4dEJ1dHRvbiIsInByZXZCdXR0b24iLCJicmVha3BvaW50cyIsIjc2NyIsIjExOTkiLCJfb25FdmVudCIsIl95ZWFycyIsIl95ZWFyc0xpbmUiLCJfeWVhcnNQb2ludCIsIl95ZWFyc0xpc3QiLCJfY29udGVudFNsaWRlciIsIl9zbGlkZXJJdGVtcyIsIl9zd2lwZXIiLCJwYWdpbmF0aW9uIiwicGFnaW5hdGlvbkNsaWNrYWJsZSIsInBhZ2luYXRpb25CdWxsZXRSZW5kZXIiLCJpbmRleCIsImNsYXNzTmFtZSIsImVxIiwib25TbGlkZUNoYW5nZVN0YXJ0IiwiX3NsaWRpbmciLCJidWxsZXRzIiwiYWN0aXZlSW5kZXgiLCJhY3RpdmVFbGVtIiwicmVzaXplIiwiZWxlbSIs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RUFBS0UsS0FBTSxzQkFDekJrSSxFQUFVLEtBR1ZuQixFQUFjLFdBQ1ZvQyxRQUFRQyxJQUFJLEtBQ1psQixFQUFVLEdBQUlsQixRQUFTaUMsR0FDbkJoQyxTQUFVLElBQ1ZDLE1BQU8sSUFDUEMsT0FBUSxPQUNSRSxNQUFNLEVBQ05jLFdBQVllLEVBQ1pkLHFCQUFxQixLQUk3QlQsRUFBVyxhQUdYL0IsRUFBUSxXQUNKK0IsSUFDQVosSUFPUm5CIiwiZmlsZSI6ImluZGV4Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiggZnVuY3Rpb24oKXtcblxuICAgICQoIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLmNvbnRhY3QtdXMnICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBDb250YWN0VXMoICQodGhpcykgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5zaXRlX19oZWFkZXInICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBIZWFkZXIoICQodGhpcykgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5saXN0LWluZm8nICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBMaXN0SW5mbyggJCggdGhpcyApICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoICcubW9iaWxlLW1lbnUnICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBNZW51KCAkKCB0aGlzICkgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5wcmVsb2FkZXInICksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldyBQcmVsb2FkZXIoICQoIHRoaXMgKSApO1xuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLnByb2R1Y3RzJyApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgU2xpZGVycyggJCggdGhpcyApICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoICcuaGlzdG9yeScgKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmV3IEhpc3RvcnkoICQoIHRoaXMgKSApO1xuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLmhlcm8tc2xpZGVyJyApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgSGVyb1NsaWRlciggJCggdGhpcyApICk7XG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBDb250YWN0VXMgPSBmdW5jdGlvbiAoIG9iaiApIHtcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfY2hlY2tib3hlcyA9IG9iai5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLFxuICAgICAgICAgICAgX3JhZGlvID0gb2JqLmZpbmQoJ2lucHV0W3R5cGU9cmFkaW9dJyksXG4gICAgICAgICAgICBfd3JhcCA9IF9vYmouZmluZCgnLmdpbnB1dF9jb250YWluZXJfZmlsZXVwbG9hZCcpLFxuICAgICAgICAgICAgX2RhdGFUZXh0ID0gX3dyYXAucGFyZW50KCkuZmluZCgnLmdmaWVsZF9kZXNjcmlwdGlvbicpLnRleHQoKSxcbiAgICAgICAgICAgIF9pbnB1dEZpbGUgPSBfb2JqLmZpbmQoJ2lucHV0W3R5cGU9ZmlsZV0nKTtcblxuICAgICAgICB2YXIgX29uRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXRGaWxlLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICdjaGFuZ2UnOiBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5maWxlcyAmJiB0aGlzLmZpbGVzWzBdICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGFUZXh0ID0gdGhpcy5maWxlc1swXS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCdjaGFuZ2luZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF93cmFwLmF0dHIoJ2RhdGEtdGV4dCcsIF9kYXRhVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgX2NoZWNrYm94ZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoJ25pY2UtY2hlY2tib3gnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfcmFkaW8uZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoJ25pY2UtcmFkaW8nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfd3JhcC5hdHRyKCdkYXRhLXRleHQnLCBfZGF0YVRleHQpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICAgICAgX2NvbnN0cnVjdCgpXG4gICAgfTtcblxuICAgIHZhciBIZWFkZXIgPSBmdW5jdGlvbiAoIG9iaiApIHtcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfbGFzdFBvcyxcbiAgICAgICAgICAgIF9jYW5Vc2VTbW9vdGhTY3JvbGwgPSB0cnVlLFxuICAgICAgICAgICAgX2luZGV4SGVybyA9ICQoICcuaGVybycgKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcblxuICAgICAgICB2YXIgX29uRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICdET01Nb3VzZVNjcm9sbCc6IGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggZGlyZWN0aW9uICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZXdoZWVsJzogZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggZGlyZWN0aW9uICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICd0b3VjaG1vdmUnOiBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvcyA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnRQb3MgPiBfbGFzdFBvcyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBjdXJyZW50UG9zIDwgX2xhc3RQb3MgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFzdFBvcyA9IGN1cnJlbnRQb3M7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdrZXlkb3duJzogZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKCBlLndoaWNoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggLTEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM1IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzYgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggLTEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsJzogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFjZSA9IDM0MDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfaW5kZXhIZXJvLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2UgPSBfaW5kZXhIZXJvLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy5zY3JvbGxUb3AoKSA+IHNwYWNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdmaXhlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ2ZpeGVkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbiggZGlyZWN0aW9uICl7XG4gICAgICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiA+IDAgJiYgIV9vYmouaGFzQ2xhc3MoICdoaWRkZW4nICkgJiYgX3dpbmRvdy5zY3JvbGxUb3AoKSA+IF9vYmoub3V0ZXJIZWlnaHQoKSAmJiBfY2FuVXNlU21vb3RoU2Nyb2xsICkge1xuICAgICAgICAgICAgICAgICAgICBfaGlkZUhlYWRlcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggZGlyZWN0aW9uIDwgMCAmJiBfb2JqLmhhc0NsYXNzKCAnaGlkZGVuJyApICYmIF9jYW5Vc2VTbW9vdGhTY3JvbGwgKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zaG93SGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zaG93SGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdoaWRkZW4nICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2hpZGVIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ2hpZGRlbicgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG4gICAgICAgIF9zZWxmLnNldENhblVzZVNjcm9sbCA9IGZ1bmN0aW9uICggcGFyYW0gKSB7XG4gICAgICAgICAgICBfY2FuVXNlU21vb3RoU2Nyb2xsID0gcGFyYW07XG4gICAgICAgIH07XG5cbiAgICAgICAgX2NvbnN0cnVjdCgpXG4gICAgfTtcblxuICAgIHZhciBMaXN0SW5mbyA9IGZ1bmN0aW9uKCBvYmogKXtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9idG4gPSBfb2JqLmZpbmQoJy5saXN0LWluZm9fX21lbnUtdGl0bGUnKSxcbiAgICAgICAgICAgIF93cmFwID0gX29iai5maW5kKCduYXYnKSxcbiAgICAgICAgICAgIF9uYXZJdGVtcyA9IF93cmFwLmZpbmQoJ2EnKSxcbiAgICAgICAgICAgIF9jb250ZW50ID0gX29iai5maW5kKCcubGlzdC1pbmZvX19jb250ZW50JyksXG4gICAgICAgICAgICBfcGF0aCA9IF9vYmouZGF0YSggJ3BhdGgnICksXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/QtdGA0LXQtNCw0LXQvCDRgtC10LrRg9GJ0LjQuSBVUkxcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0Q29udGVudChsb2NhdGlvbi5wYXRobmFtZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gX3dyaXRlTmV3Q29udGVudChlLnN0YXRlLmh0bWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgX2J0bi5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfd3JhcC5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfb3Blbk1lbnUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZU1lbnUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX25hdkl0ZW1zLm9uKCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyRWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJQb3N0RGF0YSA9IGN1ckVsZW0uZGF0YSgncG9zdCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggIWN1ckVsZW0uaGFzQ2xhc3MoJ2FjdGl2ZScpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX25hdkl0ZW1zLmF0dHIoJ2NsYXNzJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRWxlbS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gX2dldENvbnRleHQoY3VyUG9zdERhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWpheFJlcXVlc3QoY3VyUG9zdERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfZ2V0Q29udGV4dChjdXJQb3N0RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hamF4UmVxdWVzdCA9IGZ1bmN0aW9uKHBvc3REYXRhKSB7XG5cbiAgICAgICAgICAgICAgICBfcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBfcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBhY3Rpb246ICdwb3N0JywgZGF0YTogcG9zdERhdGEgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdodG1sJyxcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMDAsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChtc2cpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3dyaXRlTmV3Q29udGVudChtc2cpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7aHRtbDogbXNnfSwgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoIFhNTEh0dHBSZXF1ZXN0ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCAnRXJyb3IhJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZ2V0Q29udGV4dCA9IGZ1bmN0aW9uKHVybCl7XG4gICAgICAgICAgICAgICAgJC5nZXQodXJsKVxuICAgICAgICAgICAgICAgICAgICAuZG9uZShmdW5jdGlvbiggZGF0YSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRpbmcgQ29udGVudCBvbiBQYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICBfd3JpdGVOZXdDb250ZW50KGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCB1cmwpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vcGVuTWVudSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIHdpblNjcm9sbFRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Ub3AgPSBfYnRuLm91dGVySGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodEVsZW0gPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSBfYnRuLm9mZnNldCgpLnRvcCAtIHBvc2l0aW9uVG9wICsgd2luU2Nyb2xsVG9wO1xuXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICBfd3JhcC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogaGVpZ2h0RWxlbSArICdweCcsXG4gICAgICAgICAgICAgICAgICAgICd0b3AnOiBwb3NpdGlvblRvcCArICdweCdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5jc3MoeyAnb3ZlcmZsb3cnOiAnaGlkZGVuJyB9KTtcblxuICAgICAgICAgICAgICAgICQoICcuc2l0ZV9faGVhZGVyJyApWzBdLm9iai5zZXRDYW5Vc2VTY3JvbGwoIHRydWUgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xvc2VNZW51ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfd3JhcC5yZW1vdmVDbGFzcygnb3BlbicpO1xuICAgICAgICAgICAgICAgIF93cmFwLmF0dHIoJ3N0eWxlJywgJycpO1xuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5hdHRyKCdzdHlsZScsICcnKTtcblxuICAgICAgICAgICAgICAgICQoICcuc2l0ZV9faGVhZGVyJyApWzBdLm9iai5zZXRDYW5Vc2VTY3JvbGwoIGZhbHNlICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3dyaXRlTmV3Q29udGVudCA9IGZ1bmN0aW9uKGh0bWwpe1xuICAgICAgICAgICAgICAgIF9jb250ZW50Lmh0bWwoJycpO1xuICAgICAgICAgICAgICAgIF9jb250ZW50Lmh0bWwoaHRtbCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XG5cbiAgICB9O1xuXG4gICAgdmFyIE1lbnUgPSBmdW5jdGlvbiggb2JqICl7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfYnRuID0gJCggJy5tb2JpbGUtbWVudS1idG4nICksXG4gICAgICAgICAgICBfaHRtbCA9ICQoICdodG1sJyApO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICBfYnRuLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoICQoIHRoaXMpLmhhc0NsYXNzKCAnY2xvc2UnICkgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZU1lbnUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9idG4uYWRkQ2xhc3MoICdjbG9zZScgKTtcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAndmlzaWJsZScgKTtcbiAgICAgICAgICAgICAgICBfaHRtbC5jc3MoICdvdmVyZmxvdy15JywgJ2hpZGRlbicgKTtcblxuICAgICAgICAgICAgICAgICQoICcuc2l0ZV9faGVhZGVyJyApWzBdLm9iai5zZXRDYW5Vc2VTY3JvbGwoIHRydWUgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xvc2VNZW51ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfYnRuLnJlbW92ZUNsYXNzKCAnY2xvc2UnICk7XG4gICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3Zpc2libGUnICk7XG4gICAgICAgICAgICAgICAgX2h0bWwucmVtb3ZlQXR0ciggJ3N0eWxlJyApO1xuXG4gICAgICAgICAgICAgICAgJCggJy5zaXRlX19oZWFkZXInIClbMF0ub2JqLnNldENhblVzZVNjcm9sbCggZmFsc2UgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcblxuICAgICAgICBfY29uc3RydWN0b3IoKTtcblxuICAgIH07XG5cbiAgICB2YXIgUHJlbG9hZGVyID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfbG9hZGVyID0gX29iai5maW5kKCAnLnByZWxvYWRlcl9fYmFyJyApLFxuICAgICAgICAgICAgX2ZsYWcgPSBmYWxzZSxcbiAgICAgICAgICAgIF9sb2FkRmxhZyA9IGZhbHNlLFxuICAgICAgICAgICAgX2RlbGF5ID0gX29iai5kYXRhKCAnZGVsYXknICksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XG5cbiAgICAgICAgdmFyIF9vbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkRmxhZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX2xvYWRCYXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfbG9hZEJhciA9IGZ1bmN0aW9uICgpe1xuXG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0TG9hZFZhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDEsXG4gICAgICAgICAgICAgICAgICAgIGN1clZhbHVlID0gZmlyc3RMb2FkVmFsO1xuXG4gICAgICAgICAgICAgICAgX2xvYWRlci5hbmltYXRlKHsnd2lkdGgnOicnK2ZpcnN0TG9hZFZhbCsnJSd9LCAyMDApO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9hZFZhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDkwKSArIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxvYWRWYWw8OTAgJiYgbG9hZFZhbD5jdXJWYWx1ZSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJWYWx1ZSA9IGxvYWRWYWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9hZGVyLmFuaW1hdGUoeyd3aWR0aCc6JycrbG9hZFZhbCsnJSd9LCAyMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcblxuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKF9sb2FkRmxhZyl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkZXIuYW5pbWF0ZSh7J3dpZHRoJzogMTAwKyclJ30sIDIwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29wYWNpdHknOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDY1MCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuXG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFNsaWRlcnMgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3Byb2R1Y3RzU3dpcGVyID0gX29iai5maW5kKCAnLnByb2R1Y3RzX19zd2lwZXInICksXG4gICAgICAgICAgICBfcHJvZHVjdHNQcmV2ID0gX29iai5maW5kKCAnLnByb2R1Y3RzX19wcmV2JyApLFxuICAgICAgICAgICAgX3Byb2R1Y3RzTmV4dCA9IF9vYmouZmluZCggJy5wcm9kdWN0c19fbmV4dCcgKSxcbiAgICAgICAgICAgIF9wcm9kdWN0cyxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2luaXRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9wcm9kdWN0cyA9IG5ldyBTd2lwZXIgKCBfcHJvZHVjdHNTd2lwZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6ICdzbGlkZScsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDQsXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5leHRCdXR0b246IF9wcm9kdWN0c05leHQsXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF9wcm9kdWN0c1ByZXYsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICA3Njc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgMTE5OToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIC8vIHBhZ2luYXRpb246IF9jYXNlTWFpblNsaWRlclBhZ2luYXRpb25cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50KCk7XG4gICAgICAgICAgICAgICAgX2luaXRTbGlkZXIgKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIEhpc3RvcnkgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3llYXJzID0gX29iai5maW5kKCAnLmhpc3RvcnlfX3llYXJzJyApLFxuICAgICAgICAgICAgX3llYXJzTGluZSA9IF95ZWFycy5maW5kKCAnLmhpc3RvcnlfX3llYXJzLWxpbmUnICksXG4gICAgICAgICAgICBfeWVhcnNQb2ludCA9IF95ZWFyc0xpbmUuZmluZCgnLmhpc3RvcnlfX3llYXJzLXBvaW50JyksXG4gICAgICAgICAgICBfeWVhcnNMaXN0ID0gX3llYXJzLmZpbmQoICcuaGlzdG9yeV9feWVhcnMtbGlzdCcgKSxcbiAgICAgICAgICAgIF9jb250ZW50U2xpZGVyID0gX29iai5maW5kKCAnLmhpc3RvcnlfX2NvbnRlbnQnICksXG4gICAgICAgICAgICBfc2xpZGVySXRlbXMgPSBfY29udGVudFNsaWRlci5maW5kKCcuc3dpcGVyLXNsaWRlJyksXG4gICAgICAgICAgICBfc3dpcGVyID0gbnVsbCxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2luaXRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zd2lwZXIgPSBuZXcgU3dpcGVyKF9jb250ZW50U2xpZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF95ZWFyc0xpc3QsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25DbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25CdWxsZXRSZW5kZXI6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiaGlzdG9yeV9feWVhcnMtaXRlbSAnICsgY2xhc3NOYW1lICsgJ1wiPicgKyBfc2xpZGVySXRlbXMuZXEoaW5kZXgpLmRhdGEoJ3llYXInKSArICc8L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZUNoYW5nZVN0YXJ0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWRpbmcoJChlLmJ1bGxldHNbZS5hY3RpdmVJbmRleF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9vYmoub24oJ2NsaWNrJywgJy5oaXN0b3J5X195ZWFycy1pdGVtJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgX3NsaWRpbmcoYWN0aXZlRWxlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKHdpbmRvdykub24oe1xuICAgICAgICAgICAgICAgICAgICAncmVzaXplJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWRpbmcoX29iai5maW5kKCcuc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NsaWRpbmcgPSBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgX3llYXJzUG9pbnQuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiAoZWxlbS5vZmZzZXQoKS5sZWZ0IC0gX3llYXJzTGluZS5vZmZzZXQoKS5sZWZ0KSArICdweCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50KCk7XG4gICAgICAgICAgICAgICAgX2luaXRTbGlkZXIgKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIEhlcm9TbGlkZXIgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3NsaWRlciA9IF9vYmouZmluZCggJy5zd2lwZXItY29udGFpbmVyJyApLFxuICAgICAgICAgICAgX3BhZ2luYXRpb24gPSBfb2JqLmZpbmQoICcuc3dpcGVyLXBhZ2luYXRpb24nICksXG4gICAgICAgICAgICBfc3dpcGVyID0gbnVsbDtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2luaXRTbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygxMTEpO1xuICAgICAgICAgICAgICAgIF9zd2lwZXIgPSBuZXcgU3dpcGVyICggX3NsaWRlciwge1xuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogMzAwMCxcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnZmFkZScsXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF9wYWdpbmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29uRXZlbnQoKTtcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWRlciAoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyJdfQ==
