!function(){$(function(){new c($(".preloader")),$.each($(".contact-us"),function(){new t($(this))}),$.each($(".site__header"),function(){new n($(this))}),$.each($(".list-info"),function(){new i($(this))}),$.each($(".faq"),function(){new o($(this))}),$.each($(".mobile-menu"),function(){new a($(this))}),$.each($(".product"),function(){new d($(this))}),$.each($(".products"),function(){new l($(this))}),$.each($(".tab"),function(){new h($(this))}),$.each($(".history"),function(){new f($(this))}),$.each($(".hero-slider"),function(){new u($(this))}),$.each($(".share"),function(){new v($(this))}),$.each($(".menu"),function(){new s($(this))}),$.each($(".search"),function(){new r($(this))}),$.each($(".rate"),function(){new p($(this))})});var t=function(t){var e=this,n=t,i=t.find("input[type=checkbox]"),o=t.find("input[type=radio]"),a=n.find(".ginput_container_fileupload"),s=a.parent().find(".gfield_description").text(),r=n.find("input[type=file]"),c=function(){r.on({change:function(t){this.files&&this.files[0]&&(s=this.files[0].name,a.addClass("changing"),a.attr("data-text",s))}})},l=function(){n[0].obj=e,c(),i.each(function(){$(this).parent().addClass("nice-checkbox")}),o.each(function(){$(this).parent().addClass("nice-radio")}),a.attr("data-text",s)};l()},e=function(t){var e=this,n=t,i=n.find(".dropdown__title"),o=n.find(".dropdown__content"),a=function(){i.on({click:function(){var t=$(this);t.hasClass("active")||(i.removeClass("active"),t.addClass("active"),o.slideUp(),$(this).next().slideDown())}})},s=function(){n[0].obj=e,a()};e.setCanUseScroll=function(t){_canUseSmoothScroll=t},s()},n=function(t){var e,n=this,i=t,o=!0,a=$(".hero"),s=$(window),r=function(){s.on({DOMMouseScroll:function(t){var e=t.originalEvent.detail;if(e){var n=e>0?1:-1;c(n)}},mousewheel:function(t){var e=t.originalEvent.wheelDelta;if(e){var n=e>0?-1:1;c(n)}},touchmove:function(t){var n=t.originalEvent.touches[0].clientY;n>e?c(-1):n<e&&c(1),e=n},keydown:function(t){switch(t.which){case 32:c(1);break;case 33:c(-1);break;case 34:c(1);break;case 35:c(1);break;case 36:c(-1);break;case 38:c(-1);break;case 40:c(1);break;default:return}},scroll:function(){var t=340;a.length>0&&(t=a.outerHeight()),s.scrollTop()>t?i.addClass("fixed"):i.removeClass("fixed")}})},c=function(t){t>0&&!i.hasClass("hidden")&&s.scrollTop()>i.outerHeight()&&o?d():t<0&&i.hasClass("hidden")&&o&&l()},l=function(){i.removeClass("hidden")},d=function(){i.addClass("hidden")},f=function(){i[0].obj=n,r()};n.setCanUseScroll=function(t){o=t},f()},i=function(t){var e=t,n=e.find(".list-info__menu-title"),i=e.find("nav"),o=i.find("a"),a=e.find(".list-info__content"),s=$("body"),r=s.data("action"),c=s.data("type"),l=null,d=new XMLHttpRequest,f=function(){u(),p(o.filter(".active").data("post"))},u=function(){window.addEventListener("popstate",function(t){console.log(t.state);null==t.state?o.eq(0).trigger("click"):o.filter("[href="+t.state.foo+"]").trigger("click")},!1),n.on("click",function(){i.hasClass("open")?w():v()}),o.on("click",function(t){t.preventDefault();var e=$(this),n=e.data("post");if(!e.hasClass("active")){o.removeClass("active"),e.addClass("active"),l=e.attr("href");var i=/[^\/]*$/.exec(l)[0],a=i.split(".");i=a[0];var s=h();console.log(i),s?history.pushState({back:i},null,"../"+i):history.pushState({foo:i},null,i),p(n),w()}})},h=function(){for(var t=document.location.pathname.split("/"),e=[],n=0;n<t.length;n++)e.push(t[n]);var i;return i=e.length>3&&e[e.length-2]},p=function(t){d.abort(),d=$.ajax({url:r,data:{action:"post",data:t,flag:c},dataType:"html",timeout:2e4,type:"get",success:function(t){_(t)},error:function(t){"abort"!=t.statusText&&alert("Error!")}})},v=function(){var t=$(window).scrollTop(),e=n.outerHeight(),o=$(window).height()-n.offset().top-e+t;i.addClass("open"),i.css({height:o+"px",top:e+"px"}),$("html").css({overflow:"hidden"}),$(".site__header")[0].obj.setCanUseScroll(!0)},w=function(){i.removeClass("open"),i.attr("style",""),$("html").attr("style",""),$(".site__header")[0].obj.setCanUseScroll(!1)},_=function(t){a.html(""),a.html(t)};f()},o=function(t){var n=t,i=n.find(".faq__menu-title"),o=n.find("nav"),a=o.find("a"),s=n.find(".faq__content"),r=$("body"),c=r.data("action"),l=r.data("type"),d=null,f=new XMLHttpRequest,u=function(){h(),v(a.filter(".active").data("post"))},h=function(){window.addEventListener("popstate",function(t){console.log(t.state);null==t.state?a.eq(0).trigger("click"):a.filter("[href="+t.state.foo+"]").trigger("click")},!1),i.on("click",function(){o.hasClass("open")?_():w()}),a.on("click",function(t){t.preventDefault();var e=$(this),n=e.data("post");if(!e.hasClass("active")){a.removeClass("active"),e.addClass("active"),d=e.attr("href");var i=/[^\/]*$/.exec(d)[0],o=i.split(".");i=o[0];var s=p();s?history.pushState({back:i},null,"../"+i):history.pushState({foo:i},null,i),v(n),_()}})},p=function(){for(var t=document.location.pathname.split("/"),e=[],n=0;n<t.length;n++)e.push(t[n]);var i;return i=e.length>3&&e[e.length-2]},v=function(t){f.abort(),f=$.ajax({url:c,data:{action:"post",data:t,flag:l},dataType:"html",timeout:2e4,type:"get",success:function(t){m(t)},error:function(t){"abort"!=t.statusText&&alert("Error!")}})},w=function(){var t=$(window).scrollTop(),e=i.outerHeight(),n=$(window).height()-i.offset().top-e+t;o.addClass("open"),o.css({height:n+"px",top:e+"px"}),$("html").css({overflow:"hidden"}),$(".site__header")[0].obj.setCanUseScroll(!0)},_=function(){o.removeClass("open"),o.attr("style",""),$("html").attr("style",""),$(".site__header")[0].obj.setCanUseScroll(!1)},m=function(t){s.html(""),s.html(t),setTimeout(function(){$.each($(".dropdown"),function(){new e($(this))})},500)};u()},a=function(t){var e=t,n=$(".mobile-menu-btn"),i=$("html"),o=function(){a()},a=function(){n.on("click",function(){$(this).hasClass("close")?r():s()})},s=function(){n.addClass("close"),e.addClass("visible"),i.css("overflow-y","hidden"),$(".site__header")[0].obj.setCanUseScroll(!0)},r=function(){n.removeClass("close"),e.removeClass("visible"),i.removeAttr("style"),$(".site__header")[0].obj.setCanUseScroll(!1)};o()},s=function(t){var e=t,n=e.find(".menu__item"),i=e.find(".menu__subcategory"),o=$(".site"),a=$(window),s=function(){r()},r=function(){o.on("click",function(t){if(i.hasClass("show")&&0==$(t.target).closest(i).length&&0==$(t.target).closest(n).length)return c(),!1}),n.on("click",function(){var t=$(this),e=t.next(".menu__subcategory");if(t.next().is(".menu__subcategory")&&!e.hasClass("show")&&a.outerWidth()<1200)return l(e),!1})},c=function(){i.removeClass("show"),i.removeAttr("style")},l=function(t){var e=t;e.addClass("show"),e.height(e.find("ul").outerHeight()+20)};s()},r=function(t){var e=t,n=e.find(".search__form"),i=e.find(".search__open-btn"),o=$(".site"),a=($(window),function(){s()}),s=function(){o.on("click",function(t){if(n.hasClass("show")&&0==$(t.target).closest(n).length)return r(),!1}),i.on("click",function(){return n.hasClass("show")?r():c(),!1})},r=function(){n.removeClass("show")},c=function(){n.addClass("show")};a()},c=function(t){var e=t,n=e.find(".preloader__bar"),i=!1,o=!1,a=(e.data("delay"),$(window)),s=function(){a.on({load:function(){o=!0}})},r=function(){s(),c()},c=function(){var t=Math.floor(10*Math.random())+1,a=t;n.animate({width:""+t+"%"},200),setTimeout(function(){setInterval(function(){var t=Math.floor(90*Math.random())+1;t<90&&t>a&&(a=t,n.animate({width:""+t+"%"},200))},500)},1e3),setInterval(function(){o&&(n.animate({width:"100%"},200),e.css({opacity:0,visibility:"hidden"}),setTimeout(function(){e.remove()},650),i=!0)},500)};r()},l=function(t){var e,n=t,i=n.find(".products__swiper"),o=n.find(".products__prev"),a=n.find(".products__next"),s=function(){e=n.hasClass("products_single")?new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:1,loop:!0,nextButton:a,prevButton:o}):new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:4,loop:!0,nextButton:a,prevButton:o,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}})},r=function(){},c=function(){r(),s()};c()},d=function(t){var e,n,i=t,o=i.find(".gallery-top"),a=i.find(".gallery-thumbs"),s=function(){e=new Swiper(o,{slidesPerView:1,onSlideChangeStart:function(){var t=$(".gallery-top").find(".swiper-slide"),e=t.filter(".swiper-slide-active").index(),n=$(".gallery-thumbs").find(".swiper-slide"),i=n.eq(e);n.removeClass("active"),i.addClass("active"),$(".gallery-thumbs")[0].swiper.slideTo(e,200,!1)}}),n=new Swiper(a,{slidesPerView:3,onInit:function(){var t=$(".gallery-thumbs").find(".swiper-slide");t.eq(0).addClass("active"),t.on("click",function(){var e=+$(this).index();return t.removeClass("active"),$(this).addClass("active"),$(".gallery-top")[0].swiper.slideTo(e,200,!1),!1})},onSlideChangeStart:function(){var t=$(".gallery-thumbs").find(".swiper-slide"),e=+t.filter(".active").index();+t.filter(".swiper-slide-active").index();$(".gallery-top")[0].swiper.slideTo(e,200,!1)}})},r=function(){},c=function(){r(),s()};c()},f=function(t){var e,n,i=t,o=i.find(".history__years"),a=i.find(".history__content"),s=o.find(".history__years-list"),r=i.find(".history__years-next"),c=i.find(".history__years-prev"),l=function(){e=new Swiper(a,{slidesPerView:1,onSlideChangeStart:function(){var t=$(".history__content").find(".swiper-slide"),e=t.filter(".swiper-slide-active").index(),n=$(".history__years-list").find(".swiper-slide"),i=n.eq(e);n.removeClass("swiper-slide-active"),i.addClass("swiper-slide-active"),$(".history__years-list")[0].swiper.slideTo(e,200,!1)}}),n=new Swiper(s,{slidesPerView:9,centeredSlides:!0,nextButton:r,prevButton:c,onInit:function(){var t=$(".history__years-list").find(".swiper-slide");t.eq(0).addClass("swiper-slide-active"),t.on("click",function(){var e=+$(this).index();return t.removeClass("swiper-slide-active"),$(this).addClass("swiper-slide-active"),$(".history__years-list")[0].swiper.slideTo(e,200,!1),$(".history__content")[0].swiper.slideTo(e,200,!1),!1})},onSlideChangeStart:function(){var t=$(".history__years-list").find(".swiper-slide"),e=+t.filter(".swiper-slide-active").index();+t.filter(".swiper-slide-active").index();$(".history__content")[0].swiper.slideTo(e,200,!1)}})},d=function(){},f=function(){d(),l()};f()},u=function(t){var e=t,n=e.find(".swiper-container"),i=e.find(".swiper-pagination"),o=null,a=function(){o=new Swiper(n,{autoplay:3e3,speed:500,effect:"fade",loop:!0,pagination:i,paginationClickable:!0})},s=function(){},r=function(){s(),a()};r()},h=function(t){var e=t,n=e.find(".tab__controls"),i=n.find(".tab__controls-item"),o=n.find(".active"),a=e.find(".tab__content"),s=a.find(".tab__content-item"),r=function(){i.on({click:function(){var t=$(this);t.hasClass("active")||(i.removeClass("active"),t.addClass("active"),c(t.index()))}}),$(window).on({load:function(){o.removeClass("active"),o.trigger("click")}})},c=function(t){s.removeClass("active"),s.eq(t).addClass("active"),a.css({height:s.eq(t).outerHeight()+"px"})},l=function(){r()};l()},p=function(t){var e=t,n=e.prev("span"),i=e.find(".FSR_container_vote"),o=i.find("span"),a=i.find("label"),s=function(){o.on("click",function(){r()}),a.on("click",function(){r()})},r=function(){var t=i.find(".FSR_container"),e=t.attr("data-rate");void 0===e?setTimeout(function(){r()},500):n.html(parseFloat(e).toFixed(1)+"/5")},c=function(){var t=e.find(".FSR_container"),i=e.find(".FSR_container_vote"),o=t.attr("data-rate"),a=i.attr("data-rate");console.log(o),void 0===o&&void 0===a?setTimeout(function(){c()},500):void 0!=o?n.html(parseFloat(o).toFixed(1)+"/5"):void 0!=a&&n.html(parseFloat(a).toFixed(1)+"/5")},l=function(){c(),s()};l()},v=function(t){var e=t,n=e.find(".social__item"),i=function(){n.on({click:function(t){var e=$(this);t.preventDefault(),t.stopPropagation(),$(".et_social_sidebar_networks .et_social_icons_container").find("a[data-social_name="+e.attr("data-social")+"]").trigger("click")}})},o=function(){i()};o()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
