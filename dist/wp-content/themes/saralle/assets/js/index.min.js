!function(){$(function(){$.each($(".contact-us"),function(){new t($(this))}),$.each($(".dropdown"),function(){new e($(this))}),$.each($(".site__header"),function(){new n($(this))}),$.each($(".list-info"),function(){new i($(this))}),$.each($(".faq"),function(){new o($(this))}),$.each($(".mobile-menu"),function(){new s($(this))}),$.each($(".preloader"),function(){new r($(this))}),$.each($(".product"),function(){new d($(this))}),$.each($(".products"),function(){new l($(this))}),$.each($(".tab"),function(){new h($(this))}),$.each($(".history"),function(){new f($(this))}),$.each($(".hero-slider"),function(){new u($(this))}),$.each($(".share"),function(){new v($(this))}),$.each($(".menu"),function(){new a($(this))}),$.each($(".search"),function(){new c($(this))}),$.each($(".rate"),function(){new p($(this))})});var t=function(t){var e=this,n=t,i=t.find("input[type=checkbox]"),o=t.find("input[type=radio]"),s=n.find(".ginput_container_fileupload"),a=s.parent().find(".gfield_description").text(),c=n.find("input[type=file]"),r=function(){c.on({change:function(t){this.files&&this.files[0]&&(a=this.files[0].name,s.addClass("changing"),s.attr("data-text",a))}})},l=function(){n[0].obj=e,r(),i.each(function(){$(this).parent().addClass("nice-checkbox")}),o.each(function(){$(this).parent().addClass("nice-radio")}),s.attr("data-text",a)};l()},e=function(t){var e=this,n=t,i=n.find(".dropdown__title"),o=n.find(".dropdown__content"),s=function(){i.on({click:function(){var t=$(this);t.hasClass("active")||(i.removeClass("active"),t.addClass("active"),o.slideUp(),$(this).next().slideDown())}})},a=function(){n[0].obj=e,s()};e.setCanUseScroll=function(t){_canUseSmoothScroll=t},a()},n=function(t){var e,n=this,i=t,o=!0,s=$(".hero"),a=$(window),c=function(){a.on({DOMMouseScroll:function(t){var e=t.originalEvent.detail;if(e){var n=e>0?1:-1;r(n)}},mousewheel:function(t){var e=t.originalEvent.wheelDelta;if(e){var n=e>0?-1:1;r(n)}},touchmove:function(t){var n=t.originalEvent.touches[0].clientY;n>e?r(-1):n<e&&r(1),e=n},keydown:function(t){switch(t.which){case 32:r(1);break;case 33:r(-1);break;case 34:r(1);break;case 35:r(1);break;case 36:r(-1);break;case 38:r(-1);break;case 40:r(1);break;default:return}},scroll:function(){var t=340;s.length>0&&(t=s.outerHeight()),a.scrollTop()>t?i.addClass("fixed"):i.removeClass("fixed")}})},r=function(t){t>0&&!i.hasClass("hidden")&&a.scrollTop()>i.outerHeight()&&o?d():t<0&&i.hasClass("hidden")&&o&&l()},l=function(){i.removeClass("hidden")},d=function(){i.addClass("hidden")},f=function(){i[0].obj=n,c()};n.setCanUseScroll=function(t){o=t},f()},i=function(t){var e=t,n=e.find(".list-info__menu-title"),i=e.find("nav"),o=i.find("a"),s=e.find(".list-info__content"),a=$("body").data("action"),c=new XMLHttpRequest,r=function(){l()},l=function(){window.addEventListener("popstate",function(t){}),n.on("click",function(){i.hasClass("open")?u():f()}),o.on("click",function(t){t.preventDefault();var e=$(this),n=e.data("post");e.hasClass("active")||(o.attr("class",""),e.addClass("active"),d(n),u())})},d=function(t){c.abort(),c=$.ajax({url:a,data:{action:"post",data:t},dataType:"html",timeout:2e4,type:"get",success:function(t){h(t),history.pushState({html:t},null,null)},error:function(t){"abort"!=t.statusText&&alert("Error!")}})},f=function(){var t=$(window).scrollTop(),e=n.outerHeight(),o=$(window).height()-n.offset().top-e+t;i.addClass("open"),i.css({height:o+"px",top:e+"px"}),$("html").css({overflow:"hidden"}),$(".site__header")[0].obj.setCanUseScroll(!0)},u=function(){i.removeClass("open"),i.attr("style",""),$("html").attr("style",""),$(".site__header")[0].obj.setCanUseScroll(!1)},h=function(t){s.html(""),s.html(t)};r()},o=function(t){var e=t,n=e.find(".faq__menu-title"),i=e.find("nav"),o=i.find("a"),s=e.find(".faq__content"),a=$("body"),c=a.data("action"),r=a.data("type"),l=null,d=($(window),new XMLHttpRequest),f=function(){u(),h()},u=function(){window.addEventListener("popstate",function(t){console.log(t.state);var e=l;null==t.state?console.log("if"+t.state):e!=l&&console.log("else"+t.state)},!1),n.on("click",function(){i.hasClass("open")?_():w()}),o.on("click",function(t){t.preventDefault();var e=$(this),n=e.data("post");if(!e.hasClass("active")){o.removeClass("active"),e.addClass("active"),l=e.attr("href");var i=/[^\/]*$/.exec(l)[0],s=i.split(".");i=s[0],history.pushState({foo:i},null,i),h(),v(n),_()}})},h=function(){var t=p();console.log(t)},p=function(){for(var t=document.location.pathname.split("/"),e=[],n=0;n<t.length;n++)e.push(t[n]);var i;return i=e.length>3?e[e.length-2]:e[e.length-1],console.log(e),i},v=function(t){d.abort(),d=$.ajax({url:c,data:{action:"post",data:t,flag:r},dataType:"html",timeout:2e4,type:"get",success:function(t){m(t)},error:function(t){"abort"!=t.statusText&&alert("Error!")}})},w=function(){var t=$(window).scrollTop(),e=n.outerHeight(),o=$(window).height()-n.offset().top-e+t;i.addClass("open"),i.css({height:o+"px",top:e+"px"}),$("html").css({overflow:"hidden"}),$(".site__header")[0].obj.setCanUseScroll(!0)},_=function(){i.removeClass("open"),i.attr("style",""),$("html").attr("style",""),$(".site__header")[0].obj.setCanUseScroll(!1)},m=function(t){s.html(""),s.html(t)};f()},s=function(t){var e=t,n=$(".mobile-menu-btn"),i=$("html"),o=function(){s()},s=function(){n.on("click",function(){$(this).hasClass("close")?c():a()})},a=function(){n.addClass("close"),e.addClass("visible"),i.css("overflow-y","hidden"),$(".site__header")[0].obj.setCanUseScroll(!0)},c=function(){n.removeClass("close"),e.removeClass("visible"),i.removeAttr("style"),$(".site__header")[0].obj.setCanUseScroll(!1)};o()},a=function(t){var e=t,n=e.find(".menu__item"),i=e.find(".menu__subcategory"),o=$(".site"),s=$(window),a=function(){c()},c=function(){o.on("click",function(t){if(i.hasClass("show")&&0==$(t.target).closest(i).length&&0==$(t.target).closest(n).length)return r(),!1}),n.on("click",function(){var t=$(this),e=t.next(".menu__subcategory");if(t.next().is(".menu__subcategory")&&!e.hasClass("show")&&s.outerWidth()<1200)return l(e),!1})},r=function(){i.removeClass("show"),i.removeAttr("style")},l=function(t){var e=t;e.addClass("show"),e.height(e.find("ul").outerHeight()+20)};a()},c=function(t){var e=t,n=e.find(".search__form"),i=e.find(".search__open-btn"),o=$(".site"),s=($(window),function(){a()}),a=function(){o.on("click",function(t){if(n.hasClass("show")&&0==$(t.target).closest(n).length)return c(),!1}),i.on("click",function(){return n.hasClass("show")?c():r(),!1})},c=function(){n.removeClass("show")},r=function(){n.addClass("show")};s()},r=function(t){var e=t,n=e.find(".preloader__bar"),i=!1,o=!1,s=(e.data("delay"),$(window)),a=function(){s.on({load:function(){o=!0}})},c=function(){a(),r()},r=function(){var t=Math.floor(10*Math.random())+1,s=t;n.animate({width:""+t+"%"},200),setTimeout(function(){setInterval(function(){var t=Math.floor(90*Math.random())+1;t<90&&t>s&&(s=t,n.animate({width:""+t+"%"},200))},500)},1e3),setInterval(function(){o&&(n.animate({width:"100%"},200),e.css({opacity:0,visibility:"hidden"}),setTimeout(function(){e.remove()},650),i=!0)},500)};c()},l=function(t){var e,n=t,i=n.find(".products__swiper"),o=n.find(".products__prev"),s=n.find(".products__next"),a=function(){e=n.hasClass("products_single")?new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:1,loop:!0,nextButton:s,prevButton:o}):new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:4,loop:!0,nextButton:s,prevButton:o,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}})},c=function(){},r=function(){c(),a()};r()},d=function(t){var e,n,i=t,o=i.find(".gallery-top"),s=i.find(".gallery-thumbs"),a=function(){e=new Swiper(o,{slidesPerView:1,onSlideChangeStart:function(){var t=$(".gallery-top").find(".swiper-slide"),e=t.filter(".swiper-slide-active").index(),n=$(".gallery-thumbs").find(".swiper-slide"),i=n.eq(e);n.removeClass("active"),i.addClass("active"),$(".gallery-thumbs")[0].swiper.slideTo(e,200,!1)}}),n=new Swiper(s,{slidesPerView:3,onInit:function(){var t=$(".gallery-thumbs").find(".swiper-slide");t.eq(0).addClass("active"),t.on("click",function(){var e=+$(this).index();return t.removeClass("active"),$(this).addClass("active"),$(".gallery-top")[0].swiper.slideTo(e,200,!1),!1})},onSlideChangeStart:function(){var t=$(".gallery-thumbs").find(".swiper-slide"),e=+t.filter(".active").index();+t.filter(".swiper-slide-active").index();$(".gallery-top")[0].swiper.slideTo(e,200,!1)}})},c=function(){},r=function(){c(),a()};r()},f=function(t){var e,n,i=t,o=i.find(".history__years"),s=i.find(".history__content"),a=o.find(".history__years-list"),c=i.find(".history__years-next"),r=i.find(".history__years-prev"),l=function(){e=new Swiper(s,{slidesPerView:1,onSlideChangeStart:function(){var t=$(".history__content").find(".swiper-slide"),e=t.filter(".swiper-slide-active").index(),n=$(".history__years-list").find(".swiper-slide"),i=n.eq(e);n.removeClass("swiper-slide-active"),i.addClass("swiper-slide-active"),$(".history__years-list")[0].swiper.slideTo(e,200,!1)}}),n=new Swiper(a,{slidesPerView:9,centeredSlides:!0,nextButton:c,prevButton:r,onInit:function(){var t=$(".history__years-list").find(".swiper-slide");t.eq(0).addClass("swiper-slide-active"),t.on("click",function(){var e=+$(this).index();return t.removeClass("swiper-slide-active"),$(this).addClass("swiper-slide-active"),$(".history__years-list")[0].swiper.slideTo(e,200,!1),$(".history__content")[0].swiper.slideTo(e,200,!1),!1})},onSlideChangeStart:function(){var t=$(".history__years-list").find(".swiper-slide"),e=+t.filter(".swiper-slide-active").index();+t.filter(".swiper-slide-active").index();$(".history__content")[0].swiper.slideTo(e,200,!1)}})},d=function(){},f=function(){d(),l()};f()},u=function(t){var e=t,n=e.find(".swiper-container"),i=e.find(".swiper-pagination"),o=null,s=function(){o=new Swiper(n,{autoplay:3e3,speed:500,effect:"fade",loop:!0,pagination:i,paginationClickable:!0})},a=function(){},c=function(){a(),s()};c()},h=function(t){var e=t,n=e.find(".tab__controls"),i=n.find(".tab__controls-item"),o=n.find(".active"),s=e.find(".tab__content"),a=s.find(".tab__content-item"),c=function(){i.on({click:function(){var t=$(this);t.hasClass("active")||(i.removeClass("active"),t.addClass("active"),r(t.index()))}}),$(window).on({load:function(){o.removeClass("active"),o.trigger("click")}})},r=function(t){a.removeClass("active"),a.eq(t).addClass("active"),s.css({height:a.eq(t).outerHeight()+"px"})},l=function(){c()};l()},p=function(t){var e=t,n=e.prev("span"),i=e.find(".FSR_container_vote"),o=i.find("span"),s=i.find("label"),a=function(){o.on("click",function(){c()}),s.on("click",function(){c()})},c=function(){var t=i.find(".FSR_container"),e=t.attr("data-rate");void 0===e?setTimeout(function(){c()},500):n.html(parseFloat(e).toFixed(1)+"/5")},r=function(){var t=e.find(".FSR_container"),i=e.find(".FSR_container_vote"),o=t.attr("data-rate"),s=i.attr("data-rate");console.log(o),void 0===o&&void 0===s?setTimeout(function(){r()},500):void 0!=o?n.html(parseFloat(o).toFixed(1)+"/5"):void 0!=s&&n.html(parseFloat(s).toFixed(1)+"/5")},l=function(){r(),a()};l()},v=function(t){var e=t,n=e.find(".social__item"),i=function(){n.on({click:function(t){var e=$(this);t.preventDefault(),t.stopPropagation(),$(".et_social_sidebar_networks .et_social_icons_container").find("a[data-social_name="+e.attr("data-social")+"]").trigger("click")}})},o=function(){i()};o()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5pbmRleC5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIkNvbnRhY3RVcyIsInRoaXMiLCJEcm9wZG93biIsIkhlYWRlciIsIkxpc3RJbmZvIiwiRmFxIiwiTWVudSIsIlByZWxvYWRlciIsIlByb2R1Y3QiLCJTbGlkZXJzIiwiVGFiIiwiSGlzdG9yeSIsIkhlcm9TbGlkZXIiLCJTb2NpYWwiLCJTdWJNZW51IiwiU2VhcmNoIiwiUmF0ZSIsIm9iaiIsIl9zZWxmIiwiX29iaiIsIl9jaGVja2JveGVzIiwiZmluZCIsIl9yYWRpbyIsIl93cmFwIiwiX2RhdGFUZXh0IiwicGFyZW50IiwidGV4dCIsIl9pbnB1dEZpbGUiLCJfb25FdmVudHMiLCJvbiIsImNoYW5nZSIsImUiLCJmaWxlcyIsIm5hbWUiLCJhZGRDbGFzcyIsImF0dHIiLCJfY29uc3RydWN0IiwiX3RpdGxlcyIsIl9jb250ZW50cyIsImNsaWNrIiwiY3VyRWxlbSIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJzbGlkZVVwIiwibmV4dCIsInNsaWRlRG93biIsInNldENhblVzZVNjcm9sbCIsInBhcmFtIiwiX2NhblVzZVNtb290aFNjcm9sbCIsIl9sYXN0UG9zIiwiX2luZGV4SGVybyIsIl93aW5kb3ciLCJ3aW5kb3ciLCJET01Nb3VzZVNjcm9sbCIsImRlbHRhIiwib3JpZ2luYWxFdmVudCIsImRldGFpbCIsImRpcmVjdGlvbiIsIl9jaGVja1Njcm9sbCIsIm1vdXNld2hlZWwiLCJ3aGVlbERlbHRhIiwidG91Y2htb3ZlIiwiY3VycmVudFBvcyIsInRvdWNoZXMiLCJjbGllbnRZIiwia2V5ZG93biIsIndoaWNoIiwic2Nyb2xsIiwic3BhY2UiLCJsZW5ndGgiLCJvdXRlckhlaWdodCIsInNjcm9sbFRvcCIsIl9oaWRlSGVhZGVyIiwiX3Nob3dIZWFkZXIiLCJfYnRuIiwiX25hdkl0ZW1zIiwiX2NvbnRlbnQiLCJfcGF0aCIsImRhdGEiLCJfcmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiX2NvbnN0cnVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9jbG9zZU1lbnUiLCJfb3Blbk1lbnUiLCJwcmV2ZW50RGVmYXVsdCIsImN1clBvc3REYXRhIiwiX2FqYXhSZXF1ZXN0IiwicG9zdERhdGEiLCJhYm9ydCIsImFqYXgiLCJ1cmwiLCJhY3Rpb24iLCJkYXRhVHlwZSIsInRpbWVvdXQiLCJ0eXBlIiwic3VjY2VzcyIsIm1zZyIsIl93cml0ZU5ld0NvbnRlbnQiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiaHRtbCIsImVycm9yIiwic3RhdHVzVGV4dCIsImFsZXJ0Iiwid2luU2Nyb2xsVG9wIiwicG9zaXRpb25Ub3AiLCJoZWlnaHRFbGVtIiwiaGVpZ2h0Iiwib2Zmc2V0IiwidG9wIiwiY3NzIiwib3ZlcmZsb3ciLCJfYm9keSIsIl9saW5rIiwiX3R5cGUiLCJfaW5pdCIsIl9hY3RpdmVOYXZJdGVtcyIsImNvbnNvbGUiLCJsb2ciLCJzdGF0ZSIsIm9sZFBhdGgiLCJwYXRoIiwiZXhlYyIsInBhdGhTcGxpdCIsInNwbGl0IiwiZm9vIiwiY3VySXRlbSIsIl9jaGVja1VybCIsImRvY3VtZW50IiwibG9jYXRpb24iLCJwYXRobmFtZSIsInVybEFyciIsImkiLCJwdXNoIiwidG9rZW4iLCJmbGFnIiwiX2h0bWwiLCJyZW1vdmVBdHRyIiwiX21lbnVCdG4iLCJfc3ViTWVudSIsIl9zaXRlIiwidGFyZ2V0IiwiY2xvc2VzdCIsIl9jbG9zZVN1Yk1lbnUiLCJjdXJCdG4iLCJjdXJTdWJNZW51IiwiaXMiLCJvdXRlcldpZHRoIiwiX29wZW5TdWJNZW51Iiwic3ViTWVudSIsIl9mb3JtIiwiX2J0bk9wZW4iLCJfY2xvc2VGcmFtZSIsIl9vcGVuRnJhbWUiLCJfbG9hZGVyIiwiX2ZsYWciLCJfbG9hZEZsYWciLCJsb2FkIiwiX2xvYWRCYXIiLCJmaXJzdExvYWRWYWwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjdXJWYWx1ZSIsImFuaW1hdGUiLCJ3aWR0aCIsInNldFRpbWVvdXQiLCJzZXRJbnRlcnZhbCIsImxvYWRWYWwiLCJvcGFjaXR5IiwidmlzaWJpbGl0eSIsInJlbW92ZSIsIl9wcm9kdWN0cyIsIl9wcm9kdWN0c1N3aXBlciIsIl9wcm9kdWN0c1ByZXYiLCJfcHJvZHVjdHNOZXh0IiwiX2luaXRTbGlkZXIiLCJTd2lwZXIiLCJhdXRvcGxheSIsInNwZWVkIiwiZWZmZWN0Iiwic2xpZGVzUGVyVmlldyIsImxvb3AiLCJuZXh0QnV0dG9uIiwicHJldkJ1dHRvbiIsImJyZWFrcG9pbnRzIiwiNzY3IiwiMTE5OSIsIl9vbkV2ZW50IiwiX2dhbGxlcnlUb3AiLCJfZ2FsbGVyeVRodW1icyIsIl90b3BHYWxsZXJ5IiwiX3RodW1ic0dhbGxlcnkiLCJvblNsaWRlQ2hhbmdlU3RhcnQiLCJwcm9tb1RhYnNTbGlkZSIsImN1clNsaWRlIiwiZmlsdGVyIiwiaW5kZXgiLCJwcm9tb01haW5TbGlkZSIsInByb21vTWFpbkFjdGl2ZVNsaWRlIiwiZXEiLCJzd2lwZXIiLCJzbGlkZVRvIiwib25Jbml0IiwiX3N3aXBlciIsIl9zd2lwZXJZZWFyc0xpc3QiLCJfeWVhcnMiLCJfY29udGVudFNsaWRlciIsIl95ZWFyc0xpc3QiLCJfeWVhck5leHQiLCJfeWVhclByZXYiLCJfaW5pdFNsaWRlcnMiLCJjZW50ZXJlZFNsaWRlcyIsIl9zbGlkZXIiLCJfcGFnaW5hdGlvbiIsInBhZ2luYXRpb24iLCJwYWdpbmF0aW9uQ2xpY2thYmxlIiwiX2NvbnRyb2xzV3JhcCIsIl9jb250cm9scyIsIl9hY3RpdmVDb250cm9sIiwiX2NvbnRlbnRzV3JhcCIsIl9zaG93QWN0aXZlQ29udGVudCIsInRyaWdnZXIiLCJhY3RpdmVJbmRleCIsIl9yYXRlTnVtYmVyIiwicHJldiIsIl9yYXRlRnJhbWUiLCJfcmF0ZUl0ZW1TcGFuIiwiX3JhdGVJdGVtTGFiZWwiLCJfcmF0ZSIsIm5ld1JhdGVGcmFtZSIsInJhdGVDYWxjdWxhdGUiLCJ1bmRlZmluZWQiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsIl9sb2FkUmF0ZSIsInJhdGVDb250YWluZXIiLCJyYXRlQ29udGFpbmVyVm90ZSIsInJhdGVDYWxjdWxhdGVWb3RlIiwiX3NvY2lhbEJ1dHRvbiIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVJQSxFQUFHLFdBRUNBLEVBQUVDLEtBQU1ELEVBQUcsZUFBaUIsV0FDeEIsR0FBSUUsR0FBV0YsRUFBRUcsU0FHckJILEVBQUVDLEtBQU1ELEVBQUcsYUFBZSxXQUN0QixHQUFJSSxHQUFVSixFQUFFRyxTQUdwQkgsRUFBRUMsS0FBTUQsRUFBRyxpQkFBbUIsV0FDMUIsR0FBSUssR0FBUUwsRUFBRUcsU0FHbEJILEVBQUVDLEtBQU1ELEVBQUcsY0FBZ0IsV0FDdkIsR0FBSU0sR0FBVU4sRUFBR0csU0FHckJILEVBQUVDLEtBQU1ELEVBQUcsUUFBVSxXQUNqQixHQUFJTyxHQUFLUCxFQUFHRyxTQUdoQkgsRUFBRUMsS0FBTUQsRUFBRyxnQkFBa0IsV0FDekIsR0FBSVEsR0FBTVIsRUFBR0csU0FHakJILEVBQUVDLEtBQU1ELEVBQUcsY0FBZ0IsV0FDdkIsR0FBSVMsR0FBV1QsRUFBR0csU0FHdEJILEVBQUVDLEtBQU1ELEVBQUcsWUFBYyxXQUNyQixHQUFJVSxHQUFTVixFQUFHRyxTQUdwQkgsRUFBRUMsS0FBTUQsRUFBRyxhQUFlLFdBQ3RCLEdBQUlXLEdBQVNYLEVBQUdHLFNBR3BCSCxFQUFFQyxLQUFNRCxFQUFHLFFBQVUsV0FDakIsR0FBSVksR0FBS1osRUFBR0csU0FHaEJILEVBQUVDLEtBQU1ELEVBQUcsWUFBYyxXQUNyQixHQUFJYSxHQUFTYixFQUFHRyxTQUdwQkgsRUFBRUMsS0FBTUQsRUFBRyxnQkFBa0IsV0FDekIsR0FBSWMsR0FBWWQsRUFBR0csU0FHdkJILEVBQUVDLEtBQU1ELEVBQUcsVUFBWSxXQUNuQixHQUFJZSxHQUFRZixFQUFHRyxTQUduQkgsRUFBRUMsS0FBTUQsRUFBRyxTQUFXLFdBQ2xCLEdBQUlnQixHQUFTaEIsRUFBR0csU0FHcEJILEVBQUVDLEtBQU1ELEVBQUcsV0FBYSxX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RUFBb0JELEVBQWtCM00sS0FBTSxZQUVoRG1GLFNBQVFDLElBQUtpSCxHQUVTQyxTQUFsQkQsR0FBcURDLFNBQXRCTSxFQUMvQnhFLFdBQVcsV0FDUHFFLEtBQ0QsS0FDcUJILFFBQWpCRCxFQUNQUCxFQUFZNUgsS0FBTXFJLFdBQVdGLEdBQWVHLFFBQVEsR0FBSSxNQUM1QkYsUUFBckJNLEdBQ1BkLEVBQVk1SCxLQUFNcUksV0FBV0ssR0FBbUJKLFFBQVEsR0FBSSxPQUlwRXZILEVBQVEsV0FDSndILElBQ0EvQyxJQU9SekUsTUFHQXZHLEVBQVMsU0FBVUksR0FDbkIsR0FBSUUsR0FBT0YsRUFDWCtOLEVBQWdCN04sRUFBS0UsS0FBSyxpQkFHdEJ3SyxFQUFXLFdBQ1htRCxFQUFjbk4sSUFDVlUsTUFBUyxTQUFVME0sR0FDZixHQUFJbEgsR0FBVWpJLEVBQUVHLEtBQ2hCZ1AsR0FBTTVKLGlCQUNONEosRUFBTUMsa0JBQ05wUCxFQUFFLDBEQUEwRHVCLEtBQUssc0JBQXNCMEcsRUFBUTVGLEtBQUssZUFBZSxLQUFLNEwsUUFBUyxhQUk3STNHLEVBQVEsV0FDSnlFLElBSUp6RSIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJCggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLmNvbnRhY3QtdXMnICksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmV3IENvbnRhY3RVcyggJCh0aGlzKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLmRyb3Bkb3duJyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBEcm9wZG93biggJCh0aGlzKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLnNpdGVfX2hlYWRlcicgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgSGVhZGVyKCAkKHRoaXMpICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcubGlzdC1pbmZvJyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBMaXN0SW5mbyggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuZmFxJyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBGYXEoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLm1vYmlsZS1tZW51JyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBNZW51KCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5wcmVsb2FkZXInICksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmV3IFByZWxvYWRlciggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcucHJvZHVjdCcgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgUHJvZHVjdCggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcucHJvZHVjdHMnICksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmV3IFNsaWRlcnMoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLnRhYicgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgVGFiKCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5oaXN0b3J5JyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBIaXN0b3J5KCAkKCB0aGlzICkgKTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5oZXJvLXNsaWRlcicgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgSGVyb1NsaWRlciggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuc2hhcmUnICksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmV3IFNvY2lhbCggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcubWVudScgKSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuZXcgU3ViTWVudSggJCggdGhpcyApICk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuc2VhcmNoJyApLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBTZWFyY2goICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLnJhdGUnICksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmV3IFJhdGUoICQoIHRoaXMgKSApO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIENvbnRhY3RVcyA9IGZ1bmN0aW9uICggb2JqICkge1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9jaGVja2JveGVzID0gb2JqLmZpbmQoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJyksXHJcbiAgICAgICAgICAgIF9yYWRpbyA9IG9iai5maW5kKCdpbnB1dFt0eXBlPXJhZGlvXScpLFxyXG4gICAgICAgICAgICBfd3JhcCA9IF9vYmouZmluZCgnLmdpbnB1dF9jb250YWluZXJfZmlsZXVwbG9hZCcpLFxyXG4gICAgICAgICAgICBfZGF0YVRleHQgPSBfd3JhcC5wYXJlbnQoKS5maW5kKCcuZ2ZpZWxkX2Rlc2NyaXB0aW9uJykudGV4dCgpLFxyXG4gICAgICAgICAgICBfaW5wdXRGaWxlID0gX29iai5maW5kKCdpbnB1dFt0eXBlPWZpbGVdJyk7XHJcblxyXG4gICAgICAgIHZhciBfb25FdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfaW5wdXRGaWxlLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NoYW5nZSc6IGZ1bmN0aW9uICggZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMuZmlsZXMgJiYgdGhpcy5maWxlc1swXSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGFUZXh0ID0gdGhpcy5maWxlc1swXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoJ2NoYW5naW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfd3JhcC5hdHRyKCdkYXRhLXRleHQnLCBfZGF0YVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2NoZWNrYm94ZXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnbmljZS1jaGVja2JveCcpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfcmFkaW8uZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnbmljZS1yYWRpbycpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfd3JhcC5hdHRyKCdkYXRhLXRleHQnLCBfZGF0YVRleHQpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3QoKVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoIG9iaiApIHtcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfdGl0bGVzID0gX29iai5maW5kKCcuZHJvcGRvd25fX3RpdGxlJyksXHJcbiAgICAgICAgICAgIF9jb250ZW50cyA9IF9vYmouZmluZCgnLmRyb3Bkb3duX19jb250ZW50Jyk7XHJcblxyXG4gICAgICAgIHZhciBfb25FdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfdGl0bGVzLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJFbGVtID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWN1ckVsZW0uaGFzQ2xhc3MoJ2FjdGl2ZScpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RpdGxlcy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZW50cy5zbGlkZVVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLm5leHQoKS5zbGlkZURvd24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ2hpZGRlbicgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2hpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAnaGlkZGVuJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG4gICAgICAgIF9zZWxmLnNldENhblVzZVNjcm9sbCA9IGZ1bmN0aW9uICggcGFyYW0gKSB7XHJcbiAgICAgICAgICAgIF9jYW5Vc2VTbW9vdGhTY3JvbGwgPSBwYXJhbTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBfY29uc3RydWN0KClcclxuICAgIH07XHJcblxyXG4gICAgdmFyIEhlYWRlciA9IGZ1bmN0aW9uICggb2JqICkge1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9sYXN0UG9zLFxyXG4gICAgICAgICAgICBfY2FuVXNlU21vb3RoU2Nyb2xsID0gdHJ1ZSxcclxuICAgICAgICAgICAgX2luZGV4SGVybyA9ICQoICcuaGVybycgKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApO1xyXG5cclxuICAgICAgICB2YXIgX29uRXZlbnRzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICdET01Nb3VzZVNjcm9sbCc6IGZ1bmN0aW9uICggZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LmRldGFpbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWx0YSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoIGRlbHRhID4gMCApID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCBkaXJlY3Rpb24gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgJ21vdXNld2hlZWwnOiBmdW5jdGlvbiAoIGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRlbHRhICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9ICggZGVsdGEgPiAwICkgPyAtMSA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIGRpcmVjdGlvbiApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAndG91Y2htb3ZlJzogZnVuY3Rpb24gKCBlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvcyA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VycmVudFBvcyA+IF9sYXN0UG9zICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAtMSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBjdXJyZW50UG9zIDwgX2xhc3RQb3MgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIDEgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFzdFBvcyA9IGN1cnJlbnRQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAna2V5ZG93bic6IGZ1bmN0aW9uICggZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKCBlLndoaWNoICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggLTEgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggMSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM2IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoIC0xICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCggLTEgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCAxICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFjZSA9IDM0MDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX2luZGV4SGVyby5sZW5ndGggPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2UgPSBfaW5kZXhIZXJvLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy5zY3JvbGxUb3AoKSA+IHNwYWNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ2ZpeGVkJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ2ZpeGVkJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jaGVja1Njcm9sbCA9IGZ1bmN0aW9uKCBkaXJlY3Rpb24gKXtcclxuICAgICAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gPiAwICYmICFfb2JqLmhhc0NsYXNzKCAnaGlkZGVuJyApICYmIF93aW5kb3cuc2Nyb2xsVG9wKCkgPiBfb2JqLm91dGVySGVpZ2h0KCkgJiYgX2NhblVzZVNtb290aFNjcm9sbCApIHtcclxuICAgICAgICAgICAgICAgICAgICBfaGlkZUhlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBkaXJlY3Rpb24gPCAwICYmIF9vYmouaGFzQ2xhc3MoICdoaWRkZW4nICkgJiYgX2NhblVzZVNtb290aFNjcm9sbCApIHtcclxuICAgICAgICAgICAgICAgICAgICBfc2hvd0hlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2hvd0hlYWRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdoaWRkZW4nICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oaWRlSGVhZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ2hpZGRlbicgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuICAgICAgICBfc2VsZi5zZXRDYW5Vc2VTY3JvbGwgPSBmdW5jdGlvbiAoIHBhcmFtICkge1xyXG4gICAgICAgICAgICBfY2FuVXNlU21vb3RoU2Nyb2xsID0gcGFyYW07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdCgpXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBMaXN0SW5mbyA9IGZ1bmN0aW9uKCBvYmogKXtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2J0biA9IF9vYmouZmluZCgnLmxpc3QtaW5mb19fbWVudS10aXRsZScpLFxyXG4gICAgICAgICAgICBfd3JhcCA9IF9vYmouZmluZCgnbmF2JyksXHJcbiAgICAgICAgICAgIF9uYXZJdGVtcyA9IF93cmFwLmZpbmQoJ2EnKSxcclxuICAgICAgICAgICAgX2NvbnRlbnQgPSBfb2JqLmZpbmQoJy5saXN0LWluZm9fX2NvbnRlbnQnKSxcclxuICAgICAgICAgICAgX3BhdGggPSAkKCdib2R5JykuZGF0YSggJ2FjdGlvbicgKSxcclxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vINCf0LXRgNC10LTQsNC10Lwg0YLQtdC60YPRidC40LkgVVJMXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0Q29udGVudChsb2NhdGlvbi5wYXRobmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIF93cml0ZU5ld0NvbnRlbnQoZS5zdGF0ZS5odG1sKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIF9idG4ub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV93cmFwLmhhc0NsYXNzKCdvcGVuJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5NZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX25hdkl0ZW1zLm9uKCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyRWxlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clBvc3REYXRhID0gY3VyRWxlbS5kYXRhKCdwb3N0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggIWN1ckVsZW0uaGFzQ2xhc3MoJ2FjdGl2ZScpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbmF2SXRlbXMuYXR0cignY2xhc3MnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckVsZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfZ2V0Q29udGV4dChjdXJQb3N0RGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWpheFJlcXVlc3QoY3VyUG9zdERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfZ2V0Q29udGV4dChjdXJQb3N0RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hamF4UmVxdWVzdCA9IGZ1bmN0aW9uKHBvc3REYXRhKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IF9wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYWN0aW9uOiAncG9zdCcsIGRhdGE6IHBvc3REYXRhIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdodG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwMCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChtc2cpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF93cml0ZU5ld0NvbnRlbnQobXNnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHtodG1sOiBtc2d9LCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoIFhNTEh0dHBSZXF1ZXN0ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggWE1MSHR0cFJlcXVlc3Quc3RhdHVzVGV4dCAhPSBcImFib3J0XCIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCggJ0Vycm9yIScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2dldENvbnRleHQgPSBmdW5jdGlvbih1cmwpe1xyXG4gICAgICAgICAgICAgICAgJC5nZXQodXJsKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRpbmcgQ29udGVudCBvbiBQYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF93cml0ZU5ld0NvbnRlbnQoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCB1cmwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29wZW5NZW51ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciB3aW5TY3JvbGxUb3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCksXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Ub3AgPSBfYnRuLm91dGVySGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0RWxlbSA9ICQod2luZG93KS5oZWlnaHQoKSAtIF9idG4ub2Zmc2V0KCkudG9wIC0gcG9zaXRpb25Ub3AgKyB3aW5TY3JvbGxUb3A7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoJ29wZW4nKTtcclxuICAgICAgICAgICAgICAgIF93cmFwLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6IGhlaWdodEVsZW0gKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICd0b3AnOiBwb3NpdGlvblRvcCArICdweCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5jc3MoeyAnb3ZlcmZsb3cnOiAnaGlkZGVuJyB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCAnLnNpdGVfX2hlYWRlcicgKVswXS5vYmouc2V0Q2FuVXNlU2Nyb2xsKCB0cnVlICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbG9zZU1lbnUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3dyYXAucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcclxuICAgICAgICAgICAgICAgIF93cmFwLmF0dHIoJ3N0eWxlJywgJycpO1xyXG4gICAgICAgICAgICAgICAgJCgnaHRtbCcpLmF0dHIoJ3N0eWxlJywgJycpO1xyXG5cclxuICAgICAgICAgICAgICAgICQoICcuc2l0ZV9faGVhZGVyJyApWzBdLm9iai5zZXRDYW5Vc2VTY3JvbGwoIGZhbHNlICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF93cml0ZU5ld0NvbnRlbnQgPSBmdW5jdGlvbihodG1sKXtcclxuICAgICAgICAgICAgICAgIF9jb250ZW50Lmh0bWwoJycpO1xyXG4gICAgICAgICAgICAgICAgX2NvbnRlbnQuaHRtbChodG1sKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdmFyIEZhcSA9IGZ1bmN0aW9uKCBvYmogKXtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2J0biA9IF9vYmouZmluZCgnLmZhcV9fbWVudS10aXRsZScpLFxyXG4gICAgICAgICAgICBfd3JhcCA9IF9vYmouZmluZCggJ25hdicgKSxcclxuICAgICAgICAgICAgX25hdkl0ZW1zID0gX3dyYXAuZmluZCggJ2EnICksXHJcbiAgICAgICAgICAgIF9jb250ZW50ID0gX29iai5maW5kKCcuZmFxX19jb250ZW50JyksXHJcbiAgICAgICAgICAgIF9ib2R5ID0gJCggJ2JvZHknICksXHJcbiAgICAgICAgICAgIF9saW5rID0gX2JvZHkuZGF0YSggJ2FjdGlvbicgKSxcclxuICAgICAgICAgICAgX3R5cGUgPSBfYm9keS5kYXRhKCAndHlwZScgKSxcclxuICAgICAgICAgICAgX3BhdGggPSBudWxsLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXHJcbiAgICAgICAgICAgIF9yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX2FjdGl2ZU5hdkl0ZW1zKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdwb3BzdGF0ZScsIGZ1bmN0aW9uKCBlICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggZS5zdGF0ZSApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRQYXRoID0gX3BhdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggZS5zdGF0ZSA9PSBudWxsICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdpZicrIGUuc3RhdGUgKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvbGRQYXRoICE9IF9wYXRoICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdlbHNlJysgZS5zdGF0ZSApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2J0bi5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3dyYXAuaGFzQ2xhc3MoJ29wZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb3Blbk1lbnUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfbmF2SXRlbXMub24oICdjbGljaycsIGZ1bmN0aW9uKCBlICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJFbGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyUG9zdERhdGEgPSBjdXJFbGVtLmRhdGEoICdwb3N0JyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICFjdXJFbGVtLmhhc0NsYXNzKCAnYWN0aXZlJyApICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX25hdkl0ZW1zLnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtLmFkZENsYXNzKCAnYWN0aXZlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gX2dldENvbnRleHQoY3VyUG9zdERhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3BhdGggPSBjdXJFbGVtLmF0dHIoICdocmVmJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSAvW14vXSokLy5leGVjKCBfcGF0aCApWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFNwbGl0ID0gcGF0aC5zcGxpdCggJy4nICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoU3BsaXRbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSggeyBmb286IHBhdGggfSwgbnVsbCwgcGF0aCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGl2ZU5hdkl0ZW1zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWpheFJlcXVlc3QoIGN1clBvc3REYXRhICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZU1lbnUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF9nZXRDb250ZXh0KGN1clBvc3REYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FjdGl2ZU5hdkl0ZW1zID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gX2NoZWNrVXJsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coIGN1ckl0ZW0gKVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NoZWNrVXJsPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoICcvJyApLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybEFyciA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsQXJyLnB1c2goIHVybFsgaSBdIClcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICB2YXIgdG9rZW47XHJcbiAgICAgICAgICAgICAgICBpZih1cmxBcnIubGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gdXJsQXJyWyB1cmxBcnIubGVuZ3RoIC0gMiBdXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgdG9rZW4gPSB1cmxBcnJbIHVybEFyci5sZW5ndGggLSAxIF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1cmxBcnIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oIHBvc3REYXRhICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogX2xpbmssXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdwb3N0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcG9zdERhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWc6IF90eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2h0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfd3JpdGVOZXdDb250ZW50KCBtc2cgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCBYTUxIdHRwUmVxdWVzdCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoICdFcnJvciEnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpblNjcm9sbFRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvcCA9IF9idG4ub3V0ZXJIZWlnaHQoKSxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRFbGVtID0gJCh3aW5kb3cpLmhlaWdodCgpIC0gX2J0bi5vZmZzZXQoKS50b3AgLSBwb3NpdGlvblRvcCArIHdpblNjcm9sbFRvcDtcclxuXHJcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcygnb3BlbicpO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogaGVpZ2h0RWxlbSArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IHBvc2l0aW9uVG9wICsgJ3B4J1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnaHRtbCcpLmNzcyh7ICdvdmVyZmxvdyc6ICdoaWRkZW4nIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICQoICcuc2l0ZV9faGVhZGVyJyApWzBdLm9iai5zZXRDYW5Vc2VTY3JvbGwoIHRydWUgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlTWVudSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfd3JhcC5yZW1vdmVDbGFzcygnb3BlbicpO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYXR0cignc3R5bGUnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkKCdodG1sJykuYXR0cignc3R5bGUnLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgJCggJy5zaXRlX19oZWFkZXInIClbMF0ub2JqLnNldENhblVzZVNjcm9sbCggZmFsc2UgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3dyaXRlTmV3Q29udGVudCA9IGZ1bmN0aW9uKCBodG1sICl7XHJcbiAgICAgICAgICAgICAgICBfY29udGVudC5odG1sKCcnKTtcclxuICAgICAgICAgICAgICAgIF9jb250ZW50Lmh0bWwoIGh0bWwgKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uKCBvYmogKXtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2J0biA9ICQoICcubW9iaWxlLW1lbnUtYnRuJyApLFxyXG4gICAgICAgICAgICBfaHRtbCA9ICQoICdodG1sJyApO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgX2J0bi5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJCggdGhpcykuaGFzQ2xhc3MoICdjbG9zZScgKSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5NZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vcGVuTWVudSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfYnRuLmFkZENsYXNzKCAnY2xvc2UnICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAndmlzaWJsZScgKTtcclxuICAgICAgICAgICAgICAgIF9odG1sLmNzcyggJ292ZXJmbG93LXknLCAnaGlkZGVuJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICQoICcuc2l0ZV9faGVhZGVyJyApWzBdLm9iai5zZXRDYW5Vc2VTY3JvbGwoIHRydWUgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlTWVudSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfYnRuLnJlbW92ZUNsYXNzKCAnY2xvc2UnICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAndmlzaWJsZScgKTtcclxuICAgICAgICAgICAgICAgIF9odG1sLnJlbW92ZUF0dHIoICdzdHlsZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCAnLnNpdGVfX2hlYWRlcicgKVswXS5vYmouc2V0Q2FuVXNlU2Nyb2xsKCBmYWxzZSApO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgU3ViTWVudSA9IGZ1bmN0aW9uKCBvYmogKXtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX21lbnVCdG4gPSBfb2JqLmZpbmQoICcubWVudV9faXRlbScgKSxcclxuICAgICAgICAgICAgX3N1Yk1lbnUgPSBfb2JqLmZpbmQoICcubWVudV9fc3ViY2F0ZWdvcnknICksXHJcbiAgICAgICAgICAgIF9zaXRlID0gJCggJy5zaXRlJyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIF9zaXRlLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgICdjbGljaycsIGZ1bmN0aW9uICggZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX3N1Yk1lbnUuaGFzQ2xhc3MoICdzaG93JyApICYmICQoIGUudGFyZ2V0ICkuY2xvc2VzdCggX3N1Yk1lbnUgKS5sZW5ndGggPT0gMCAmJiAkKCBlLnRhcmdldCApLmNsb3Nlc3QoIF9tZW51QnRuICkubGVuZ3RoID09IDAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZVN1Yk1lbnUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9tZW51QnRuLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckJ0biA9ICQoIHRoaXMgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyU3ViTWVudSA9IGN1ckJ0bi5uZXh0KCAnLm1lbnVfX3N1YmNhdGVnb3J5JyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIGN1ckJ0bi5uZXh0KCkuaXMoICcubWVudV9fc3ViY2F0ZWdvcnknICkgJiYgIWN1clN1Yk1lbnUuaGFzQ2xhc3MoICdzaG93JyApICYmIF93aW5kb3cub3V0ZXJXaWR0aCgpIDwgMTIwMCAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5TdWJNZW51KCBjdXJTdWJNZW51ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlU3ViTWVudSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc3ViTWVudS5yZW1vdmVDbGFzcyggJ3Nob3cnICk7XHJcbiAgICAgICAgICAgICAgICBfc3ViTWVudS5yZW1vdmVBdHRyKCAnc3R5bGUnICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb3BlblN1Yk1lbnUgPSBmdW5jdGlvbiggb2JqICl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHN1Yk1lbnUgPSBvYmo7XHJcblxyXG4gICAgICAgICAgICAgICAgc3ViTWVudS5hZGRDbGFzcyggJ3Nob3cnICk7XHJcbiAgICAgICAgICAgICAgICBzdWJNZW51LmhlaWdodCggc3ViTWVudS5maW5kKCAndWwnICkub3V0ZXJIZWlnaHQoKSArIDIwICk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBTZWFyY2ggPSBmdW5jdGlvbiggb2JqICl7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9mb3JtID0gX29iai5maW5kKCAnLnNlYXJjaF9fZm9ybScgKSxcclxuICAgICAgICAgICAgX2J0bk9wZW4gPSBfb2JqLmZpbmQoICcuc2VhcmNoX19vcGVuLWJ0bicgKSxcclxuICAgICAgICAgICAgX3NpdGUgPSAkKCAnLnNpdGUnICksXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgX3NpdGUub24oXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJywgZnVuY3Rpb24gKCBlICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfZm9ybS5oYXNDbGFzcyggJ3Nob3cnICkgJiYgJCggZS50YXJnZXQgKS5jbG9zZXN0KCBfZm9ybSApLmxlbmd0aCA9PSAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGcmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2J0bk9wZW4ub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoICFfZm9ybS5oYXNDbGFzcyggJ3Nob3cnICkgICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuRnJhbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGcmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbG9zZUZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9mb3JtLnJlbW92ZUNsYXNzKCAnc2hvdycgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vcGVuRnJhbWUgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIF9mb3JtLmFkZENsYXNzKCAnc2hvdycgKTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uICggb2JqICkge1xyXG5cclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2xvYWRlciA9IF9vYmouZmluZCggJy5wcmVsb2FkZXJfX2JhcicgKSxcclxuICAgICAgICAgICAgX2ZsYWcgPSBmYWxzZSxcclxuICAgICAgICAgICAgX2xvYWRGbGFnID0gZmFsc2UsXHJcbiAgICAgICAgICAgIF9kZWxheSA9IF9vYmouZGF0YSggJ2RlbGF5JyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICk7XHJcblxyXG4gICAgICAgIHZhciBfb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRGbGFnID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX2xvYWRCYXIoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2xvYWRCYXIgPSBmdW5jdGlvbiAoKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RMb2FkVmFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApICsgMSxcclxuICAgICAgICAgICAgICAgICAgICBjdXJWYWx1ZSA9IGZpcnN0TG9hZFZhbDtcclxuXHJcbiAgICAgICAgICAgICAgICBfbG9hZGVyLmFuaW1hdGUoeyd3aWR0aCc6JycrZmlyc3RMb2FkVmFsKyclJ30sIDIwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkVmFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTApICsgMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxvYWRWYWw8OTAgJiYgbG9hZFZhbD5jdXJWYWx1ZSl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVmFsdWUgPSBsb2FkVmFsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkZXIuYW5pbWF0ZSh7J3dpZHRoJzonJytsb2FkVmFsKyclJ30sIDIwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoX2xvYWRGbGFnKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb2FkZXIuYW5pbWF0ZSh7J3dpZHRoJzogMTAwKyclJ30sIDIwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29wYWNpdHknOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDY1MCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuXHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgU2xpZGVycyA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9wcm9kdWN0c1N3aXBlciA9IF9vYmouZmluZCggJy5wcm9kdWN0c19fc3dpcGVyJyApLFxyXG4gICAgICAgICAgICBfcHJvZHVjdHNQcmV2ID0gX29iai5maW5kKCAnLnByb2R1Y3RzX19wcmV2JyApLFxyXG4gICAgICAgICAgICBfcHJvZHVjdHNOZXh0ID0gX29iai5maW5kKCAnLnByb2R1Y3RzX19uZXh0JyApLFxyXG4gICAgICAgICAgICBfcHJvZHVjdHM7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9pbml0U2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBfb2JqLmhhc0NsYXNzKCdwcm9kdWN0c19zaW5nbGUnKSApIHtcclxuICAgICAgICAgICAgICAgICAgICBfcHJvZHVjdHMgPSBuZXcgU3dpcGVyICggX3Byb2R1Y3RzU3dpcGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfcHJvZHVjdHNOZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2QnV0dG9uOiBfcHJvZHVjdHNQcmV2XHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfcHJvZHVjdHMgPSBuZXcgU3dpcGVyICggX3Byb2R1Y3RzU3dpcGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiA0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfcHJvZHVjdHNOZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2QnV0dG9uOiBfcHJvZHVjdHNQcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNzY3OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExOTk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWRlciAoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBQcm9kdWN0ID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3RvcEdhbGxlcnkgPSBfb2JqLmZpbmQoICcuZ2FsbGVyeS10b3AnICksXHJcbiAgICAgICAgICAgIF90aHVtYnNHYWxsZXJ5ID0gX29iai5maW5kKCAnLmdhbGxlcnktdGh1bWJzJyApLFxyXG4gICAgICAgICAgICBfZ2FsbGVyeVRvcCwgX2dhbGxlcnlUaHVtYnM7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9pbml0U2xpZGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2dhbGxlcnlUb3AgPSBuZXcgU3dpcGVyKCBfdG9wR2FsbGVyeSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZUNoYW5nZVN0YXJ0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvbW9UYWJzU2xpZGUgPSAkKCAnLmdhbGxlcnktdG9wJyApLmZpbmQoICcuc3dpcGVyLXNsaWRlJyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyU2xpZGUgPSBwcm9tb1RhYnNTbGlkZS5maWx0ZXIoICcuc3dpcGVyLXNsaWRlLWFjdGl2ZScgKS5pbmRleCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbW9NYWluU2xpZGUgPSAkKCAnLmdhbGxlcnktdGh1bWJzJyApLmZpbmQoICcuc3dpcGVyLXNsaWRlJyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbW9NYWluQWN0aXZlU2xpZGUgPSBwcm9tb01haW5TbGlkZS5lcSggY3VyU2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21vTWFpblNsaWRlLnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9tb01haW5BY3RpdmVTbGlkZS5hZGRDbGFzcyggJ2FjdGl2ZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoICcuZ2FsbGVyeS10aHVtYnMnIClbMF0uc3dpcGVyLnNsaWRlVG8oIGN1clNsaWRlLCAyMDAsIGZhbHNlIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnMgPSBuZXcgU3dpcGVyKCBfdGh1bWJzR2FsbGVyeSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgb25Jbml0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvbW9UYWJzU2xpZGUgPSAkKCAnLmdhbGxlcnktdGh1bWJzJyApLmZpbmQoICcuc3dpcGVyLXNsaWRlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbW9UYWJzU2xpZGUuZXEoIDAgKS5hZGRDbGFzcyggJ2FjdGl2ZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21vVGFic1NsaWRlLm9uKCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1clNsaWRlID0gKyggJCggdGhpcyApLmluZGV4KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9tb1RhYnNTbGlkZS5yZW1vdmVDbGFzcyggJ2FjdGl2ZScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5hZGRDbGFzcyggJ2FjdGl2ZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCAnLmdhbGxlcnktdG9wJyApWzBdLnN3aXBlci5zbGlkZVRvKCBjdXJTbGlkZSwgMjAwLCBmYWxzZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2xpZGVDaGFuZ2VTdGFydDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb21vVGFic1NsaWRlID0gJCggJy5nYWxsZXJ5LXRodW1icycgKS5maW5kKCAnLnN3aXBlci1zbGlkZScgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clNsaWRlID0gKyggcHJvbW9UYWJzU2xpZGUuZmlsdGVyKCAnLmFjdGl2ZScgKS5pbmRleCgpICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJBY3RpdmVTbGlkZSA9ICsoIHByb21vVGFic1NsaWRlLmZpbHRlciggJy5zd2lwZXItc2xpZGUtYWN0aXZlJyApLmluZGV4KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qaWYgKCBjdXJBY3RpdmVTbGlkZSA+PSBjdXJTbGlkZSApe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCAnLmdhbGxlcnktdG9wJyApWzBdLnN3aXBlci5zbGlkZVRvKCBjdXJTbGlkZSwgMjAwLCBmYWxzZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgX2luaXRTbGlkZXIgKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgSGlzdG9yeSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF95ZWFycyA9IF9vYmouZmluZCggJy5oaXN0b3J5X195ZWFycycgKSxcclxuICAgICAgICAgICAgX2NvbnRlbnRTbGlkZXIgPSBfb2JqLmZpbmQoICcuaGlzdG9yeV9fY29udGVudCcgKSxcclxuICAgICAgICAgICAgX3llYXJzTGlzdCA9IF95ZWFycy5maW5kKCAnLmhpc3RvcnlfX3llYXJzLWxpc3QnICksXHJcbiAgICAgICAgICAgIF95ZWFyTmV4dCA9IF9vYmouZmluZCggJy5oaXN0b3J5X195ZWFycy1uZXh0JyApLFxyXG4gICAgICAgICAgICBfeWVhclByZXYgPSBfb2JqLmZpbmQoICcuaGlzdG9yeV9feWVhcnMtcHJldicgKSxcclxuICAgICAgICAgICAgX3N3aXBlciwgX3N3aXBlclllYXJzTGlzdDtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2luaXRTbGlkZXJzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3N3aXBlciA9IG5ldyBTd2lwZXIoIF9jb250ZW50U2xpZGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlU3RhcnQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9tb1RhYnNTbGlkZSA9ICQoICcuaGlzdG9yeV9fY29udGVudCcgKS5maW5kKCAnLnN3aXBlci1zbGlkZScgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clNsaWRlID0gcHJvbW9UYWJzU2xpZGUuZmlsdGVyKCAnLnN3aXBlci1zbGlkZS1hY3RpdmUnICkuaW5kZXgoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21vTWFpblNsaWRlID0gJCggJy5oaXN0b3J5X195ZWFycy1saXN0JyApLmZpbmQoICcuc3dpcGVyLXNsaWRlJyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbW9NYWluQWN0aXZlU2xpZGUgPSBwcm9tb01haW5TbGlkZS5lcSggY3VyU2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21vTWFpblNsaWRlLnJlbW92ZUNsYXNzKCAnc3dpcGVyLXNsaWRlLWFjdGl2ZScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbW9NYWluQWN0aXZlU2xpZGUuYWRkQ2xhc3MoICdzd2lwZXItc2xpZGUtYWN0aXZlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCggJy5oaXN0b3J5X195ZWFycy1saXN0JyApWzBdLnN3aXBlci5zbGlkZVRvKCBjdXJTbGlkZSwgMjAwLCBmYWxzZSApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyWWVhcnNMaXN0ID0gbmV3IFN3aXBlciggX3llYXJzTGlzdCwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDksXHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogX3llYXJOZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZCdXR0b246IF95ZWFyUHJldixcclxuICAgICAgICAgICAgICAgICAgICBvbkluaXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9tb1RhYnNTbGlkZSA9ICQoICcuaGlzdG9yeV9feWVhcnMtbGlzdCcgKS5maW5kKCAnLnN3aXBlci1zbGlkZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21vVGFic1NsaWRlLmVxKCAwICkuYWRkQ2xhc3MoICdzd2lwZXItc2xpZGUtYWN0aXZlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbW9UYWJzU2xpZGUub24oICdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyU2xpZGUgPSArKCAkKCB0aGlzICkuaW5kZXgoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21vVGFic1NsaWRlLnJlbW92ZUNsYXNzKCAnc3dpcGVyLXNsaWRlLWFjdGl2ZScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5hZGRDbGFzcyggJ3N3aXBlci1zbGlkZS1hY3RpdmUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCggJy5oaXN0b3J5X195ZWFycy1saXN0JyApWzBdLnN3aXBlci5zbGlkZVRvKCBjdXJTbGlkZSwgMjAwLCBmYWxzZSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCggJy5oaXN0b3J5X19jb250ZW50JyApWzBdLnN3aXBlci5zbGlkZVRvKCBjdXJTbGlkZSwgMjAwLCBmYWxzZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2xpZGVDaGFuZ2VTdGFydDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb21vVGFic1NsaWRlID0gJCggJy5oaXN0b3J5X195ZWFycy1saXN0JyApLmZpbmQoICcuc3dpcGVyLXNsaWRlJyApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyU2xpZGUgPSArKCBwcm9tb1RhYnNTbGlkZS5maWx0ZXIoICcuc3dpcGVyLXNsaWRlLWFjdGl2ZScgKS5pbmRleCgpICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJBY3RpdmVTbGlkZSA9ICsoIHByb21vVGFic1NsaWRlLmZpbHRlciggJy5zd2lwZXItc2xpZGUtYWN0aXZlJyApLmluZGV4KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoICcuaGlzdG9yeV9fY29udGVudCcgKVswXS5zd2lwZXIuc2xpZGVUbyggY3VyU2xpZGUsIDIwMCwgZmFsc2UgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgX2luaXRTbGlkZXJzICgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIEhlcm9TbGlkZXIgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfc2xpZGVyID0gX29iai5maW5kKCAnLnN3aXBlci1jb250YWluZXInICksXHJcbiAgICAgICAgICAgIF9wYWdpbmF0aW9uID0gX29iai5maW5kKCAnLnN3aXBlci1wYWdpbmF0aW9uJyApLFxyXG4gICAgICAgICAgICBfc3dpcGVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2luaXRTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc3dpcGVyID0gbmV3IFN3aXBlciAoIF9zbGlkZXIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogMzAwMCxcclxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdDogJ2ZhZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogX3BhZ2luYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgX2luaXRTbGlkZXIgKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgVGFiID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2NvbnRyb2xzV3JhcCA9IF9vYmouZmluZCgnLnRhYl9fY29udHJvbHMnKSxcclxuICAgICAgICAgICAgX2NvbnRyb2xzID0gX2NvbnRyb2xzV3JhcC5maW5kKCcudGFiX19jb250cm9scy1pdGVtJyksXHJcbiAgICAgICAgICAgIF9hY3RpdmVDb250cm9sID0gX2NvbnRyb2xzV3JhcC5maW5kKCcuYWN0aXZlJyksXHJcbiAgICAgICAgICAgIF9jb250ZW50c1dyYXAgPSBfb2JqLmZpbmQoJy50YWJfX2NvbnRlbnQnKSxcclxuICAgICAgICAgICAgX2NvbnRlbnRzID0gX2NvbnRlbnRzV3JhcC5maW5kKCcudGFiX19jb250ZW50LWl0ZW0nKTtcclxuICAgICAgICBcclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfb25FdmVudCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9jb250cm9scy5vbih7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFjdXJJdGVtLmhhc0NsYXNzKCdhY3RpdmUnKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250cm9scy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93QWN0aXZlQ29udGVudChjdXJJdGVtLmluZGV4KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICAnbG9hZCc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGl2ZUNvbnRyb2wucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWN0aXZlQ29udHJvbC50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3Nob3dBY3RpdmVDb250ZW50ID0gZnVuY3Rpb24oYWN0aXZlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIF9jb250ZW50cy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBfY29udGVudHMuZXEoYWN0aXZlSW5kZXgpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIF9jb250ZW50c1dyYXAuY3NzKHsgJ2hlaWdodCc6IF9jb250ZW50cy5lcShhY3RpdmVJbmRleCkub3V0ZXJIZWlnaHQoKSArICdweCcgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIFJhdGUgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfcmF0ZU51bWJlciA9IF9vYmoucHJldiggJ3NwYW4nICksXHJcbiAgICAgICAgICAgIF9yYXRlRnJhbWUgPSBfb2JqLmZpbmQoICcuRlNSX2NvbnRhaW5lcl92b3RlJyApLFxyXG4gICAgICAgICAgICBfcmF0ZUl0ZW1TcGFuID0gX3JhdGVGcmFtZS5maW5kKCAnc3BhbicgKSxcclxuICAgICAgICAgICAgX3JhdGVJdGVtTGFiZWwgPSBfcmF0ZUZyYW1lLmZpbmQoICdsYWJlbCcgKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX29uRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfcmF0ZUl0ZW1TcGFuLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIF9yYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3JhdGVJdGVtTGFiZWwub24oICdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3JhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9yYXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBuZXdSYXRlRnJhbWUgPSBfcmF0ZUZyYW1lLmZpbmQoICcuRlNSX2NvbnRhaW5lcicgKSxcclxuICAgICAgICAgICAgICAgICAgICByYXRlQ2FsY3VsYXRlID0gbmV3UmF0ZUZyYW1lLmF0dHIoICdkYXRhLXJhdGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCByYXRlQ2FsY3VsYXRlID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JhdGVOdW1iZXIuaHRtbCggcGFyc2VGbG9hdChyYXRlQ2FsY3VsYXRlKS50b0ZpeGVkKDEpICsnLzUnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2xvYWRSYXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByYXRlQ29udGFpbmVyID0gX29iai5maW5kKCcuRlNSX2NvbnRhaW5lcicpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJhdGVDb250YWluZXJWb3RlID0gX29iai5maW5kKCcuRlNSX2NvbnRhaW5lcl92b3RlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgcmF0ZUNhbGN1bGF0ZSA9IHJhdGVDb250YWluZXIuYXR0ciggJ2RhdGEtcmF0ZScgKSxcclxuICAgICAgICAgICAgICAgICAgICByYXRlQ2FsY3VsYXRlVm90ZSA9IHJhdGVDb250YWluZXJWb3RlLmF0dHIoICdkYXRhLXJhdGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coIHJhdGVDYWxjdWxhdGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggcmF0ZUNhbGN1bGF0ZSA9PT0gdW5kZWZpbmVkICYmIHJhdGVDYWxjdWxhdGVWb3RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWRSYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggcmF0ZUNhbGN1bGF0ZSAhPSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3JhdGVOdW1iZXIuaHRtbCggcGFyc2VGbG9hdChyYXRlQ2FsY3VsYXRlKS50b0ZpeGVkKDEpICsnLzUnICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIHJhdGVDYWxjdWxhdGVWb3RlICE9IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgICAgICBfcmF0ZU51bWJlci5odG1sKCBwYXJzZUZsb2F0KHJhdGVDYWxjdWxhdGVWb3RlKS50b0ZpeGVkKDEpICsnLzUnICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX2xvYWRSYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudCgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIFNvY2lhbCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICBfc29jaWFsQnV0dG9uID0gX29iai5maW5kKCcuc29jaWFsX19pdGVtJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9vbkV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIF9zb2NpYWxCdXR0b24ub24oe1xyXG4gICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmV0X3NvY2lhbF9zaWRlYmFyX25ldHdvcmtzIC5ldF9zb2NpYWxfaWNvbnNfY29udGFpbmVyJykuZmluZCgnYVtkYXRhLXNvY2lhbF9uYW1lPScrY3VySXRlbS5hdHRyKCdkYXRhLXNvY2lhbCcpKyddJykudHJpZ2dlciggXCJjbGlja1wiICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgX29uRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH1cclxuXHJcbn0gKSgpOyJdfQ==
