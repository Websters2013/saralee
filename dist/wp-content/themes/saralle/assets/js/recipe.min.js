!function(){$(function(){$.each($(".contact-us"),function(){new t($(this))}),$.each($(".dropdown"),function(){new e($(this))}),$.each($(".site__header"),function(){new n($(this))}),$.each($(".list-info"),function(){new i($(this))}),$.each($(".faq"),function(){new o($(this))}),$.each($(".mobile-menu"),function(){new s($(this))}),$.each($(".preloader"),function(){new r($(this))}),$.each($(".product"),function(){new d($(this))}),$.each($(".products"),function(){new l($(this))}),$.each($(".tab"),function(){new h($(this))}),$.each($(".history"),function(){new f($(this))}),$.each($(".hero-slider"),function(){new u($(this))}),$.each($(".share"),function(){new v($(this))}),$.each($(".menu"),function(){new a($(this))}),$.each($(".search"),function(){new c($(this))}),$.each($(".rate"),function(){new p($(this))})});var t=function(t){var e=this,n=t,i=t.find("input[type=checkbox]"),o=t.find("input[type=radio]"),s=n.find(".ginput_container_fileupload"),a=s.parent().find(".gfield_description").text(),c=n.find("input[type=file]"),r=function(){c.on({change:function(t){this.files&&this.files[0]&&(a=this.files[0].name,s.addClass("changing"),s.attr("data-text",a))}})},l=function(){n[0].obj=e,r(),i.each(function(){$(this).parent().addClass("nice-checkbox")}),o.each(function(){$(this).parent().addClass("nice-radio")}),s.attr("data-text",a)};l()},e=function(t){var e=this,n=t,i=n.find(".dropdown__title"),o=n.find(".dropdown__content"),s=function(){i.on({click:function(){var t=$(this);t.hasClass("active")||(i.removeClass("active"),t.addClass("active"),o.slideUp(),$(this).next().slideDown())}})},a=function(){n[0].obj=e,s()};e.setCanUseScroll=function(t){_canUseSmoothScroll=t},a()},n=function(t){var e,n=this,i=t,o=!0,s=$(".hero"),a=$(window),c=function(){a.on({DOMMouseScroll:function(t){var e=t.originalEvent.detail;if(e){var n=e>0?1:-1;r(n)}},mousewheel:function(t){var e=t.originalEvent.wheelDelta;if(e){var n=e>0?-1:1;r(n)}},touchmove:function(t){var n=t.originalEvent.touches[0].clientY;n>e?r(-1):n<e&&r(1),e=n},keydown:function(t){switch(t.which){case 32:r(1);break;case 33:r(-1);break;case 34:r(1);break;case 35:r(1);break;case 36:r(-1);break;case 38:r(-1);break;case 40:r(1);break;default:return}},scroll:function(){var t=340;s.length>0&&(t=s.outerHeight()),a.scrollTop()>t?i.addClass("fixed"):i.removeClass("fixed")}})},r=function(t){t>0&&!i.hasClass("hidden")&&a.scrollTop()>i.outerHeight()&&o?d():t<0&&i.hasClass("hidden")&&o&&l()},l=function(){i.removeClass("hidden")},d=function(){i.addClass("hidden")},f=function(){i[0].obj=n,c()};n.setCanUseScroll=function(t){o=t},f()},i=function(t){var e=t,n=e.find(".list-info__menu-title"),i=e.find("nav"),o=i.find("a"),s=e.find(".list-info__content"),a=$("body").data("action"),c=new XMLHttpRequest,r=function(){l()},l=function(){window.addEventListener("popstate",function(t){}),n.on("click",function(){i.hasClass("open")?u():f()}),o.on("click",function(t){t.preventDefault();var e=$(this),n=e.data("post");e.hasClass("active")||(o.attr("class",""),e.addClass("active"),d(n),u())})},d=function(t){c.abort(),c=$.ajax({url:a,data:{action:"post",data:t},dataType:"html",timeout:2e4,type:"get",success:function(t){h(t),history.pushState({html:t},null,null)},error:function(t){"abort"!=t.statusText&&alert("Error!")}})},f=function(){var t=$(window).scrollTop(),e=n.outerHeight(),o=$(window).height()-n.offset().top-e+t;i.addClass("open"),i.css({height:o+"px",top:e+"px"}),$("html").css({overflow:"hidden"}),$(".site__header")[0].obj.setCanUseScroll(!0)},u=function(){i.removeClass("open"),i.attr("style",""),$("html").attr("style",""),$(".site__header")[0].obj.setCanUseScroll(!1)},h=function(t){s.html(""),s.html(t)};r()},o=function(t){var e=t,n=e.find(".faq__menu-title"),i=e.find("nav"),o=i.find("a"),s=e.find(".faq__content"),a=$("body").data("action"),c=$("body").data("type"),r=null,l=new XMLHttpRequest,d=function(){f()},f=function(){console.log("1"),window.addEventListener("popstate",function(t){var e=r;null==t.state?console.log(t.state):(r="php/"+t.state.foo+".php",e!=r&&console.log(t.state))},!1),n.on("click",function(){i.hasClass("open")?p():h()}),o.on("click",function(t){t.preventDefault();var e=$(this),n=e.data("post");if(!e.hasClass("active")){o.removeClass("active"),e.addClass("active"),r=e.attr("href");var i=/[^\/]*$/.exec(r)[0],s=i.split(".");i=s[0],history.pushState({foo:i},null,i),u(n),p()}})},u=function(t){l.abort(),l=$.ajax({url:a,data:{action:"post",data:t,flag:c},dataType:"html",timeout:2e4,type:"get",success:function(t){v(t)},error:function(t){"abort"!=t.statusText&&alert("Error!")}})},h=function(){var t=$(window).scrollTop(),e=n.outerHeight(),o=$(window).height()-n.offset().top-e+t;i.addClass("open"),i.css({height:o+"px",top:e+"px"}),$("html").css({overflow:"hidden"}),$(".site__header")[0].obj.setCanUseScroll(!0)},p=function(){i.removeClass("open"),i.attr("style",""),$("html").attr("style",""),$(".site__header")[0].obj.setCanUseScroll(!1)},v=function(t){s.html(""),s.html(t)};d()},s=function(t){var e=t,n=$(".mobile-menu-btn"),i=$("html"),o=function(){s()},s=function(){n.on("click",function(){$(this).hasClass("close")?c():a()})},a=function(){n.addClass("close"),e.addClass("visible"),i.css("overflow-y","hidden"),$(".site__header")[0].obj.setCanUseScroll(!0)},c=function(){n.removeClass("close"),e.removeClass("visible"),i.removeAttr("style"),$(".site__header")[0].obj.setCanUseScroll(!1)};o()},a=function(t){var e=t,n=e.find(".menu__item"),i=e.find(".menu__subcategory"),o=$(".site"),s=$(window),a=function(){c()},c=function(){o.on("click",function(t){if(i.hasClass("show")&&0==$(t.target).closest(i).length&&0==$(t.target).closest(n).length)return r(),!1}),n.on("click",function(){var t=$(this),e=t.next(".menu__subcategory");if(t.next().is(".menu__subcategory")&&!e.hasClass("show")&&s.outerWidth()<1200)return l(e),!1})},r=function(){i.removeClass("show"),i.removeAttr("style")},l=function(t){var e=t;e.addClass("show"),e.height(e.find("ul").outerHeight()+20)};a()},c=function(t){var e=t,n=e.find(".search__form"),i=e.find(".search__open-btn"),o=$(".site"),s=($(window),function(){a()}),a=function(){o.on("click",function(t){if(n.hasClass("show")&&0==$(t.target).closest(n).length)return c(),!1}),i.on("click",function(){return n.hasClass("show")?c():r(),!1})},c=function(){n.removeClass("show")},r=function(){n.addClass("show")};s()},r=function(t){var e=t,n=e.find(".preloader__bar"),i=!1,o=!1,s=(e.data("delay"),$(window)),a=function(){s.on({load:function(){o=!0}})},c=function(){a(),r()},r=function(){var t=Math.floor(10*Math.random())+1,s=t;n.animate({width:""+t+"%"},200),setTimeout(function(){setInterval(function(){var t=Math.floor(90*Math.random())+1;t<90&&t>s&&(s=t,n.animate({width:""+t+"%"},200))},500)},1e3),setInterval(function(){o&&(n.animate({width:"100%"},200),e.css({opacity:0,visibility:"hidden"}),setTimeout(function(){e.remove()},650),i=!0)},500)};c()},l=function(t){var e,n=t,i=n.find(".products__swiper"),o=n.find(".products__prev"),s=n.find(".products__next"),a=function(){e=n.hasClass("products_single")?new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:1,loop:!0,nextButton:s,prevButton:o}):new Swiper(i,{autoplay:!1,speed:500,effect:"slide",slidesPerView:4,loop:!0,nextButton:s,prevButton:o,breakpoints:{767:{slidesPerView:1},1199:{slidesPerView:2}}})},c=function(){},r=function(){c(),a()};r()},d=function(t){var e,n,i=t,o=i.find(".gallery-top"),s=i.find(".gallery-thumbs"),a=function(){e=new Swiper(o,{slidesPerView:1,onSlideChangeStart:function(){var t=$(".gallery-top").find(".swiper-slide"),e=t.filter(".swiper-slide-active").index(),n=$(".gallery-thumbs").find(".swiper-slide"),i=n.eq(e);n.removeClass("active"),i.addClass("active"),$(".gallery-thumbs")[0].swiper.slideTo(e,200,!1)}}),n=new Swiper(s,{slidesPerView:3,onInit:function(){var t=$(".gallery-thumbs").find(".swiper-slide");t.eq(0).addClass("active"),t.on("click",function(){var e=+$(this).index();return t.removeClass("active"),$(this).addClass("active"),$(".gallery-top")[0].swiper.slideTo(e,200,!1),!1})},onSlideChangeStart:function(){var t=$(".gallery-thumbs").find(".swiper-slide"),e=+t.filter(".active").index();+t.filter(".swiper-slide-active").index();$(".gallery-top")[0].swiper.slideTo(e,200,!1)}})},c=function(){},r=function(){c(),a()};r()},f=function(t){var e,n,i=t,o=i.find(".history__years"),s=i.find(".history__content"),a=o.find(".history__years-list"),c=i.find(".history__years-next"),r=i.find(".history__years-prev"),l=function(){e=new Swiper(s,{slidesPerView:1,onSlideChangeStart:function(){var t=$(".history__content").find(".swiper-slide"),e=t.filter(".swiper-slide-active").index(),n=$(".history__years-list").find(".swiper-slide"),i=n.eq(e);n.removeClass("swiper-slide-active"),i.addClass("swiper-slide-active"),$(".history__years-list")[0].swiper.slideTo(e,200,!1)}}),n=new Swiper(a,{slidesPerView:9,centeredSlides:!0,nextButton:c,prevButton:r,onInit:function(){var t=$(".history__years-list").find(".swiper-slide");t.eq(0).addClass("swiper-slide-active"),t.on("click",function(){var e=+$(this).index();return t.removeClass("swiper-slide-active"),$(this).addClass("swiper-slide-active"),$(".history__years-list")[0].swiper.slideTo(e,200,!1),$(".history__content")[0].swiper.slideTo(e,200,!1),!1})},onSlideChangeStart:function(){var t=$(".history__years-list").find(".swiper-slide"),e=+t.filter(".swiper-slide-active").index();+t.filter(".swiper-slide-active").index();$(".history__content")[0].swiper.slideTo(e,200,!1)}})},d=function(){},f=function(){d(),l()};f()},u=function(t){var e=t,n=e.find(".swiper-container"),i=e.find(".swiper-pagination"),o=null,s=function(){o=new Swiper(n,{autoplay:3e3,speed:500,effect:"fade",loop:!0,pagination:i,paginationClickable:!0})},a=function(){},c=function(){a(),s()};c()},h=function(t){var e=t,n=e.find(".tab__controls"),i=n.find(".tab__controls-item"),o=n.find(".active"),s=e.find(".tab__content"),a=s.find(".tab__content-item"),c=function(){i.on({click:function(){var t=$(this);t.hasClass("active")||(i.removeClass("active"),t.addClass("active"),r(t.index()))}}),$(window).on({load:function(){o.removeClass("active"),o.trigger("click")}})},r=function(t){a.removeClass("active"),a.eq(t).addClass("active"),s.css({height:a.eq(t).outerHeight()+"px"})},l=function(){c()};l()},p=function(t){var e=t,n=e.prev("span"),i=e.find(".FSR_container_vote"),o=i.find("span"),s=i.find("label"),a=function(){o.on("click",function(){c()}),s.on("click",function(){c()})},c=function(){var t=i.find(".FSR_container"),e=t.attr("data-rate");void 0===e?setTimeout(function(){c()},500):n.html(parseFloat(e).toFixed(1)+"/5")},r=function(){var t=e.find(".FSR_container"),i=e.find(".FSR_container_vote"),o=t.attr("data-rate"),s=i.attr("data-rate");console.log(o),void 0===o&&void 0===s?setTimeout(function(){r()},500):void 0!=o?n.html(parseFloat(o).toFixed(1)+"/5"):void 0!=s&&n.html(parseFloat(s).toFixed(1)+"/5")},l=function(){r(),a()};l()},v=function(t){var e=t,n=e.find(".social__item"),i=function(){n.on({click:function(t){var e=$(this);t.preventDefault(),t.stopPropagation(),$(".et_social_sidebar_networks .et_social_icons_container").find("a[data-social_name="+e.attr("data-social")+"]").trigger("click")}})},o=function(){i()};o()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
